<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Javaee-base</title>
      <link href="/2020/02/14/javaee-base/"/>
      <url>/2020/02/14/javaee-base/</url>
      
        <content type="html"><![CDATA[<h1 id="1-常用命令："><a href="#1-常用命令：" class="headerlink" title="1.常用命令："></a>1.常用命令：</h1><blockquote><p>dir         列出文件目录</p><p>md        创建目录</p><p>rd          删除目录</p><p>cd         进入目录</p><p>cd\        回到根目录</p><p>del         删除文件   del *.txt  删除目录所有txt文件</p><p>echo 想要写入的文本内容&gt;要写入的文件</p></blockquote><h4 id="java的核心机制：-JVM-和-垃圾回收"><a href="#java的核心机制：-JVM-和-垃圾回收" class="headerlink" title="java的核心机制： JVM 和 垃圾回收"></a>java的核心机制： JVM 和 垃圾回收</h4><h1 id="2-JDK-amp-JRE"><a href="#2-JDK-amp-JRE" class="headerlink" title="2.JDK  &amp;  JRE"></a>2.JDK  &amp;  JRE</h1><img src="/2020/02/14/javaee-base/image-20200513134903684.png" class="" title="image-20200513134903684"><h4 id="与JVM关系："><a href="#与JVM关系：" class="headerlink" title="与JVM关系："></a>与JVM关系：</h4><img src="/2020/02/14/javaee-base/image-20200513135011404.png" class="" title="image-20200513135011404"><img src="/2020/02/14/javaee-base/image-20200513135144754.png" class="" title="image-20200513135144754"><p>java.exe  编译文件         。class：字节码文件      java.exe： 运行文件</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//第一个java程序</span><span class="token keyword">class</span> <span class="token class-name">Helloworld</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWrold!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="另外：vacode官方配置java环境文档"><a href="#另外：vacode官方配置java环境文档" class="headerlink" title="另外：vacode官方配置java环境文档"></a>另外：<a href="https://code.visualstudio.com/docs/languages/java" target="_blank" rel="noopener">vacode官方配置java环境文档</a></h3><h1 id="3-java的变量："><a href="#3-java的变量：" class="headerlink" title="3.java的变量："></a>3.java的变量：</h1><img src="/2020/02/14/javaee-base/image-20200513163444464.png" class="" title="image-20200513163444464"><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//其中Long型 定义要以 L 结尾：</span><span class="token keyword">long</span> abc <span class="token operator">=</span> 123123L<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//floaat 要加 F ：</span><span class="token keyword">float</span> abc <span class="token operator">=</span> <span class="token number">123.123F</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// char(字符) 与 string(字符串) 不同</span><span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//正确</span><span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token string">'AB'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//错误</span><span class="token comment" spellcheck="true">//char = '';不对    string = '';可以！</span><span class="token comment" spellcheck="true">//另外 可以为 </span><span class="token keyword">char</span> <span class="token operator">=</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>   或者  <span class="token keyword">char</span> <span class="token operator">=</span> <span class="token string">'\t'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// “\t” 相等于tab的展位。</span><span class="token keyword">char</span> <span class="token operator">=</span> <span class="token string">'\u0065'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出转义符即ascll码 "A";</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-1-转换规则："><a href="#3-1-转换规则：" class="headerlink" title="3.1 转换规则："></a>3.1 转换规则：</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//向高位转换：  byte&lt;short&lt;int&lt;long&lt;float&lt;double</span><span class="token keyword">byte</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//用较高位的int,或者用比int范围大的；</span><span class="token comment" spellcheck="true">//其中，byte short char 做运算时，结果应为 int 类型：</span><span class="token keyword">byte</span> a <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span><span class="token keyword">char</span> b <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span><span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出66</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//强制类型转换：</span><span class="token keyword">double</span> a <span class="token operator">=</span> <span class="token number">12.999</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>a<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//使用int强转 输出 12，可能会出现精度损失,只是可能！</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出结果为-128</span><span class="token comment" spellcheck="true">//自动提升：</span><span class="token keyword">long</span> a <span class="token operator">=</span> <span class="token number">123123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//不加L 也可以，123123它属于int，用long接收，没问题，要是超过int就要加L； </span><span class="token keyword">float</span> a <span class="token operator">=</span> <span class="token number">12.3</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//不加F 报错！12.3是double，不能用float接收；</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2020/02/14/javaee-base/image-20200513172109296.png" class="" title="image-20200513172109296"><h1 id="4-java-运算符："><a href="#4-java-运算符：" class="headerlink" title="4.java 运算符："></a>4.java 运算符：</h1><h3 id="4-1算术、赋值、比较、逻辑、位运算、三元-运算符："><a href="#4-1算术、赋值、比较、逻辑、位运算、三元-运算符：" class="headerlink" title="4.1算术、赋值、比较、逻辑、位运算、三元 运算符："></a>4.1算术、赋值、比较、逻辑、位运算、三元 运算符：</h3><img src="/2020/02/14/javaee-base/image-20200513172621011.png" class="" title="image-20200513172621011"><h5 id="其中：-取余-的符号决定于被除数；"><a href="#其中：-取余-的符号决定于被除数；" class="headerlink" title="其中： 取余 % 的符号决定于被除数；"></a>其中： 取余 % 的符号决定于被除数；</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> a<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//此处分先后++</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>分开写<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>a<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 也可以是++a</span><span class="token keyword">int</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2020/02/14/javaee-base/image-20200513174120903.png" class="" title="image-20200513174120903"><img src="/2020/02/14/javaee-base/image-20200513174219102.png" class="" title="image-20200513174219102"><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>String maxStr1 <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"a大"</span><span class="token operator">:</span><span class="token string">"b大"</span><span class="token punctuation">;</span>String maxStr2 <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"a大"</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>m <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"nm相等"</span> <span class="token operator">:</span> <span class="token string">"n大"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="优先级："><a href="#优先级：" class="headerlink" title="优先级："></a>优先级：</h3><img src="/2020/02/14/javaee-base/image-20200513174839836.png" class="" title="image-20200513174839836"><h1 id="5-java的输入，需要用到Scanner"><a href="#5-java的输入，需要用到Scanner" class="headerlink" title="5.java的输入，需要用到Scanner:"></a>5.java的输入，需要用到<code>Scanner</code>:</h1><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ScannerTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“请输入：”<span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//此处为int,string为 string name = scan.next();  char为charAt()</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-1-java-的分支语句-switch-case语句："><a href="#5-1-java-的分支语句-switch-case语句：" class="headerlink" title="5.1 java 的分支语句 switch-case语句："></a>5.1 java 的分支语句 switch-case语句：</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//可以是byte、short、char、shring、枚举类型.. 就是不可以放 布尔型;</span>    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ZERO<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ONE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>TWO<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ZERO<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-1-java的内嵌循环："><a href="#5-1-java的内嵌循环：" class="headerlink" title="5.1 java的内嵌循环："></a>5.1 java的内嵌循环：</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> <span class="token number">4</span> <span class="token operator">-</span> i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>k <span class="token operator">&lt;</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"# "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>k <span class="token operator">&lt;</span> <span class="token number">4</span> <span class="token operator">-</span> i<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"# "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出：</span>    #   # #  # # # # # # ## # # # # # # # #  # # #   # #    #<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 求100000以内的质数</span><span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"花时:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//没有优化，花时2000毫秒左右</span><span class="token comment" spellcheck="true">//优化后:</span><span class="token keyword">class</span> <span class="token class-name">Helloworld</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">boolean</span> isFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//标识i是否被除尽,一旦除尽,修改其值</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//for (int j=2;j&lt;i;j++){</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                isFlag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>isFlag<span class="token operator">==</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//System.out.print(i + " ");</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            isFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//重置isFlag</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"个数:"</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"花时:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//花时18毫秒！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="其中break-结束当前循环-continue是结束本次循环；且break后面不能有执行语句；continue后面可以"><a href="#其中break-结束当前循环-continue是结束本次循环；且break后面不能有执行语句；continue后面可以" class="headerlink" title="其中break 结束当前循环  continue是结束本次循环；且break后面不能有执行语句；continue后面可以;"></a>其中break 结束当前循环  continue是结束本次循环；且break后面不能有执行语句；continue后面可以;</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//break与continue都是默认结束最近的一个for</span><span class="token comment" spellcheck="true">//带标签的break： continue同理;</span>Flag<span class="token operator">:</span><span class="token keyword">for</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   <span class="token keyword">for</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   <span class="token keyword">break</span> Flag<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//结束带Flag的第一个for</span><span class="token comment" spellcheck="true">//应用到上一题的求质数:</span><span class="token keyword">class</span> <span class="token class-name">Helloworld</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    Flag<span class="token operator">:</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">continue</span> Flag<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//其意就是如果i%j==0 直接跳出第二个循环，跳到带Flag标签的for；</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"个数:"</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"花时:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//花时同样是18毫秒，但是代码量更少~</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="项目一参考"><a href="#项目一参考" class="headerlink" title="###项目一参考###"></a><a href="[https://blog.csdn.net/Ricardo__Lu/article/details/96124706?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158938725519724839246647%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.57652%2522%257D&amp;request_id=158938725519724839246647&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v25-10-96124706.nonecase&amp;utm_term=readKeyBoard](https://blog.csdn.net/Ricardo__Lu/article/details/96124706?ops_request_misc=%7B%22request%5Fid%22%3A%22158938725519724839246647%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.57652%22%7D&amp;request_id=158938725519724839246647&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v25-10-96124706.nonecase&amp;utm_term=readKeyBoard)">###项目一参考###</a></h3><h3 id="项目一参考-1"><a href="#项目一参考-1" class="headerlink" title="####项目一参考####"></a><a href="[https://blog.csdn.net/weixin_42517667/article/details/82620191?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158938725519724839246657%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=158938725519724839246657&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v25-2-82620191.nonecase&amp;utm_term=readKeyBoard](https://blog.csdn.net/weixin_42517667/article/details/82620191?ops_request_misc=%7B%22request%5Fid%22%3A%22158938725519724839246657%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=158938725519724839246657&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v25-2-82620191.nonecase&amp;utm_term=readKeyBoard)">####项目一参考####</a></h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>get &amp; post</title>
      <link href="/2020/02/02/get-post/"/>
      <url>/2020/02/02/get-post/</url>
      
        <content type="html"><![CDATA[<h2 id="后端入门了解"><a href="#后端入门了解" class="headerlink" title="后端入门了解"></a>后端入门了解</h2><h4 id="目的：实现API-了解API-的get-post-以及它里面的-request、param、query和body"><a href="#目的：实现API-了解API-的get-post-以及它里面的-request、param、query和body" class="headerlink" title="目的：实现API   了解API 的get/post 以及它里面的 request、param、query和body"></a>目的：实现API   了解API 的<code>get/post</code> 以及它里面的 <code>request</code>、<code>param</code>、<code>query</code>和<code>body</code></h4><h4 id="框架：flask"><a href="#框架：flask" class="headerlink" title="框架：flask"></a>框架：flask</h4><h4 id="需要：python版本，flask依赖、虚拟环境-这里不花时间列出，需要自行百度哟"><a href="#需要：python版本，flask依赖、虚拟环境-这里不花时间列出，需要自行百度哟" class="headerlink" title="需要：python版本，flask依赖、虚拟环境[这里不花时间列出，需要自行百度哟~]"></a>需要：python版本，flask依赖、虚拟环境[这里不花时间列出，需要自行百度哟~]</h4><h4 id="【平台可以使用VScode-或者-pycharm，本文使用的是VScode】"><a href="#【平台可以使用VScode-或者-pycharm，本文使用的是VScode】" class="headerlink" title="【平台可以使用VScode 或者 pycharm，本文使用的是VScode】"></a>【平台可以使用<code>VScode</code> 或者 <code>pycharm</code>，本文使用的是VScode】</h4><h4 id="Flask参考网站"><a href="#Flask参考网站" class="headerlink" title="Flask参考网站"></a><a href="https://flask.palletsprojects.com/en/1.1.x/quickstart/" target="_blank" rel="noopener">Flask参考网站</a></h4><h1 id="1-开始："><a href="#1-开始：" class="headerlink" title="1.开始："></a>1.开始：</h1><h4 id="1、ctrl-c-v-一下代码："><a href="#1、ctrl-c-v-一下代码：" class="headerlink" title="1、ctrl c - v 一下代码："></a>1、ctrl c - v 一下代码：</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#新建一个main.py，键入以下代码</span><span class="token comment" spellcheck="true">#需要注意的是，此时应该在你的文件视图下会有_pycache_ 和 venv 这两个文件了，如下图：</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flaskapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"Hello RRW!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2020/02/02/get-post/image-20200511162247005.png" class="" title="image-20200511162247005"><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#在终端键入命令：</span>set FLASK_APP<span class="token operator">=</span>main<span class="token punctuation">.</span>py  <span class="token comment" spellcheck="true">#Linux的是export FLASK...来指定FLASK_APP环境变量</span>flask run  <span class="token comment" spellcheck="true">#别忘记cd到你的main.py文件哟，或者直接“选择文件在终端打开”</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="然后就会出现本地的一个5000端口的链接啦："><a href="#然后就会出现本地的一个5000端口的链接啦：" class="headerlink" title="然后就会出现本地的一个5000端口的链接啦："></a>然后就会出现本地的一个5000端口的链接啦：</h4><img src="/2020/02/02/get-post/image-20200511163044446.png" class="" title="image-20200511163044446"><h4 id="Ctrl-点下链接-康康你的返回如下就没毛病了："><a href="#Ctrl-点下链接-康康你的返回如下就没毛病了：" class="headerlink" title="Ctrl +点下链接 康康你的返回如下就没毛病了："></a>Ctrl +点下链接 康康你的返回如下就没毛病了：</h4><img src="/2020/02/02/get-post/image-20200511163155436.png" class="" title="image-20200511163155436"><h4 id="“-”后面可以是name、age…等等-，表示每一个api，可以用127-1-5000-name-来返回name接口的内容"><a href="#“-”后面可以是name、age…等等-，表示每一个api，可以用127-1-5000-name-来返回name接口的内容" class="headerlink" title="“/”后面可以是name、age…等等 ，表示每一个api，可以用127.1/5000/name 来返回name接口的内容"></a>“/”后面可以是name、age…等等 ，表示每一个api，可以用127.1/5000/name 来返回name接口的内容</h4><h1 id="2-GET-amp-POST"><a href="#2-GET-amp-POST" class="headerlink" title="2 .GET &amp; POST:"></a>2 .GET &amp; POST:</h1><h5 id="在平台下面会返回GET-浏览器默认-，那如果想要分会POST呢？"><a href="#在平台下面会返回GET-浏览器默认-，那如果想要分会POST呢？" class="headerlink" title="在平台下面会返回GET(浏览器默认)，那如果想要分会POST呢？"></a>在平台下面会返回GET(浏览器默认)，那如果想要分会POST呢？</h5><img src="/2020/02/02/get-post/image-20200511164344164.png" class="" title="image-20200511164344164"><h3 id="这里会用到postman，来测试："><a href="#这里会用到postman，来测试：" class="headerlink" title="这里会用到postman，来测试："></a>这里会用到<code>postman</code>，来测试：</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#首先增加name的接口:</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/name'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#可以是get，也可以是post，返回都是同样的内容</span><span class="token keyword">def</span> <span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"ruanrongwang~"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="在浏览器请求127-1-5000-name-时-，你同样会发现它是默认的get请求，但是在postman请求时呢？"><a href="#在浏览器请求127-1-5000-name-时-，你同样会发现它是默认的get请求，但是在postman请求时呢？" class="headerlink" title="在浏览器请求127.1/5000/name 时 ，你同样会发现它是默认的get请求，但是在postman请求时呢？"></a>在浏览器请求127.1/5000/name 时 ，你同样会发现它是默认的get请求，但是在postman请求时呢？</h4><img src="/2020/02/02/get-post/image-20200511165018787.png" class="" title="image-20200511165018787"><h4 id="你会发现，当选择POST时，VScode给你返回的是POST的一个请求"><a href="#你会发现，当选择POST时，VScode给你返回的是POST的一个请求" class="headerlink" title="你会发现，当选择POST时，VScode给你返回的是POST的一个请求;"></a>你会发现，当选择POST时，VScode给你返回的是POST的一个请求;</h4><h2 id="2-1-JSON-结构化数据："><a href="#2-1-JSON-结构化数据：" class="headerlink" title="2.1  JSON 结构化数据："></a>2.1  JSON 结构化数据：</h2><img src="/2020/02/02/get-post/image-20200511170227354.png" class="" title="image-20200511170227354"><h4 id="这样的目的是更方便的通过-它的（key，value）-获取“用户”的信息-name啊-age啊等等。"><a href="#这样的目的是更方便的通过-它的（key，value）-获取“用户”的信息-name啊-age啊等等。" class="headerlink" title="这样的目的是更方便的通过 它的（key，value） 获取“用户”的信息 name啊 age啊等等。"></a>这样的目的是更方便的通过 它的（key，value） 获取“用户”的信息 name啊 age啊等等。</h4><h2 id="2-2-1-前端怎么给后端发送数据？（get）"><a href="#2-2-1-前端怎么给后端发送数据？（get）" class="headerlink" title="2.2.1  前端怎么给后端发送数据？（get）"></a>2.2.1  前端怎么给后端发送数据？（get）</h2><img src="/2020/02/02/get-post/image-20200511171054222.png" class="" title="image-20200511171054222"><p>可以看到通过request.args.get 前端给后端发送了 name=RRW,</p><h2 id="2-2-2-在post里该怎么发呢？-form-表单提交"><a href="#2-2-2-在post里该怎么发呢？-form-表单提交" class="headerlink" title="2.2.2  在post里该怎么发呢？ (form:表单提交)"></a>2.2.2  在post里该怎么发呢？ (form:表单提交)</h2><img src="/2020/02/02/get-post/image-20200511173356126.png" class="" title="image-20200511173356126"><img src="/2020/02/02/get-post/image-20200511174055666.png" class="" title="image-20200511174055666"><hr><h1 id="2、数据库的搭建："><a href="#2、数据库的搭建：" class="headerlink" title="2、数据库的搭建："></a>2、数据库的搭建：</h1><h5 id="直接上连接吧"><a href="#直接上连接吧" class="headerlink" title="直接上连接吧"></a>直接上连接吧</h5><h4 id="Define-and-Access-the-Database"><a href="#Define-and-Access-the-Database" class="headerlink" title="Define and Access the Database"></a><a href="https://flask.palletsprojects.com/en/1.1.x/tutorial/database/?highlight=access#define-and-access-the-database" target="_blank" rel="noopener">Define and Access the Database</a></h4><h4 id="Application-Setup"><a href="#Application-Setup" class="headerlink" title="Application Setup"></a><a href="https://flask.palletsprojects.com/en/1.1.x/tutorial/factory/?highlight=application" target="_blank" rel="noopener">Application Setup</a></h4><img src="/2020/02/02/get-post/image-20200520174733714.png" class="" title="image-20200520174733714"><h4 id="其中，SQLite是嵌入式的，不需要你再搭建另外的数据库服务器；"><a href="#其中，SQLite是嵌入式的，不需要你再搭建另外的数据库服务器；" class="headerlink" title="其中，SQLite是嵌入式的，不需要你再搭建另外的数据库服务器；"></a>其中，SQLite是嵌入式的，不需要你再搭建另外的数据库服务器；</h4><h4 id="2-1、数据库实例的创建"><a href="#2-1、数据库实例的创建" class="headerlink" title="2.1、数据库实例的创建;"></a>2.1、数据库实例的创建;</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">//</span>首先 cd 到flaskr下echo test<span class="token operator">></span> db<span class="token punctuation">.</span>py<span class="token operator">//</span>初始化数据库：echo test<span class="token operator">></span> schema<span class="token punctuation">.</span>sql  <span class="token operator">//</span>后面按文档步骤来操作，两个文件的代码如下：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#db.py:</span><span class="token keyword">import</span> sqlite3<span class="token keyword">import</span> click<span class="token keyword">from</span> flask <span class="token keyword">import</span> current_app<span class="token punctuation">,</span> g<span class="token keyword">from</span> flask<span class="token punctuation">.</span>cli <span class="token keyword">import</span> with_appcontext<span class="token keyword">def</span> <span class="token function">get_db</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">'db'</span> <span class="token operator">not</span> <span class="token keyword">in</span> g<span class="token punctuation">:</span>        g<span class="token punctuation">.</span>db <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>            current_app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'DATABASE'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            detect_types<span class="token operator">=</span>sqlite3<span class="token punctuation">.</span>PARSE_DECLTYPES        <span class="token punctuation">)</span>        g<span class="token punctuation">.</span>db<span class="token punctuation">.</span>row_factory <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>Row    <span class="token keyword">return</span> g<span class="token punctuation">.</span>db<span class="token keyword">def</span> <span class="token function">init_db</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    db <span class="token operator">=</span> get_db<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> current_app<span class="token punctuation">.</span>open_resource<span class="token punctuation">(</span><span class="token string">'schema.sql'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        db<span class="token punctuation">.</span>executescript<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">close_db</span><span class="token punctuation">(</span>e<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    db <span class="token operator">=</span> g<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'db'</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>    <span class="token keyword">if</span> db <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>        db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>@click<span class="token punctuation">.</span>command<span class="token punctuation">(</span><span class="token string">'init-db'</span><span class="token punctuation">)</span>@with_appcontext<span class="token keyword">def</span> <span class="token function">init_db_command</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Clear the existing data and create new tables."""</span>    init_db<span class="token punctuation">(</span><span class="token punctuation">)</span>    click<span class="token punctuation">.</span>echo<span class="token punctuation">(</span><span class="token string">'Initialized the database.'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">init_app</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>teardown_appcontext<span class="token punctuation">(</span>close_db<span class="token punctuation">)</span>    app<span class="token punctuation">.</span>cli<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span>init_db_command<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#schema.sql:</span>DROP TABLE IF EXISTS userProfile<span class="token punctuation">;</span>CREATE TABLE userProfile <span class="token punctuation">(</span>    id INTEGER PRIMARY KEY RRWINCREMENT<span class="token punctuation">,</span>    username TEXT UNIQUE NOT NULL<span class="token punctuation">,</span>    fens INTEGER NOT NULL DEFAULT <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#在 __init__.py里还得加上：</span>    <span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> db    db<span class="token punctuation">.</span>init_app<span class="token punctuation">(</span>app<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="最后就是数据库创建："><a href="#最后就是数据库创建：" class="headerlink" title="最后就是数据库创建："></a>最后就是数据库创建：</h4><pre class="line-numbers language-python"><code class="language-python">flask init<span class="token operator">-</span>db<span class="token operator">//</span>会看到  “Initialized the database<span class="token punctuation">.</span>”  如下：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/2020/02/02/get-post/image-20200520212328226.png" class="" title="image-20200520212328226"><h4 id="然后就可以使用数据库管理工具（我这里用的是Navicat）连接sqlite了："><a href="#然后就可以使用数据库管理工具（我这里用的是Navicat）连接sqlite了：" class="headerlink" title="然后就可以使用数据库管理工具（我这里用的是Navicat）连接sqlite了："></a>然后就可以使用数据库管理工具（我这里用的是Navicat）连接sqlite了：</h4><img src="/2020/02/02/get-post/image-20200520213234468.png" class="" title="image-20200520213234468"><h4 id="可以看到自己在schema-sql中自己创建的表说明没得问题了："><a href="#可以看到自己在schema-sql中自己创建的表说明没得问题了：" class="headerlink" title="可以看到自己在schema.sql中自己创建的表说明没得问题了："></a>可以看到自己在schema.sql中自己创建的表说明没得问题了：</h4><img src="/2020/02/02/get-post/image-20200520213334364.png" class="" title="image-20200520213334364"><h4 id="2-2、工厂模式创建flask实例；"><a href="#2-2、工厂模式创建flask实例；" class="headerlink" title="2.2、工厂模式创建flask实例；"></a>2.2、工厂模式创建flask实例；</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">//</span>首先在文件目录下（终端）：mkdir flaskr<span class="token operator">//</span>初始化：echo test<span class="token operator">></span> __init__<span class="token punctuation">.</span>py  <span class="token operator">//</span>linux下是 touch __init__<span class="token punctuation">.</span>py   <span class="token operator">//</span>得到如下目录文件：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="/2020/02/02/get-post/image-20200520181848584.png" class="" title="image-20200520181848584"><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">//</span>然后环境变量设成flaskr这个package：set FLASK_APP<span class="token operator">=</span>flaskr<span class="token operator">//</span>设成开发环境：set FLASK_BW<span class="token operator">=</span>development<span class="token operator">//</span>运行：flask run    <span class="token operator">//</span>如下：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2020/02/02/get-post/image-20200520183720852.png" class="" title="image-20200520183720852"><h4 id="注意-运行的目录对不对（在FLASK-BILIBILI目录下），找不到“flaskr”这个包的话就会这样子的："><a href="#注意-运行的目录对不对（在FLASK-BILIBILI目录下），找不到“flaskr”这个包的话就会这样子的：" class="headerlink" title="注意:运行的目录对不对（在FLASK-BILIBILI目录下），找不到“flaskr”这个包的话就会这样子的："></a>注意:运行的目录对不对（在FLASK-BILIBILI目录下），找不到“flaskr”这个包的话就会这样子的：</h4><img src="/2020/02/02/get-post/image-20200520184707455.png" class="" title="image-20200520184707455"><h4 id="虽然你前面的步骤都没有报错，这可能就是解释性语言的特点吧"><a href="#虽然你前面的步骤都没有报错，这可能就是解释性语言的特点吧" class="headerlink" title="虽然你前面的步骤都没有报错，这可能就是解释性语言的特点吧~"></a>虽然你前面的步骤都没有报错，这可能就是解释性语言的特点吧~</h4><h4 id="然后一个个-app的请求试试会不会no-Found："><a href="#然后一个个-app的请求试试会不会no-Found：" class="headerlink" title="然后一个个@app的请求试试会不会no Found："></a>然后一个个@app的请求试试会不会no Found：</h4><img src="/2020/02/02/get-post/image-20200520190650204.png" class="" title="image-20200520190650204"><img src="/2020/02/02/get-post/image-20200520190704716.png" class="" title="image-20200520190704716"><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Data Warehouse</title>
      <link href="/2019/02/02/data-warehouse/"/>
      <url>/2019/02/02/data-warehouse/</url>
      
        <content type="html"><![CDATA[<h3 id="数据仓库-："><a href="#数据仓库-：" class="headerlink" title="==数据仓库==："></a>==数据仓库==：</h3><h4 id="数据仓库是一个面向主题的、集成的、相对稳定的、反映历史变化的数据集合，它用于支持企业或组织的决策分析处理。"><a href="#数据仓库是一个面向主题的、集成的、相对稳定的、反映历史变化的数据集合，它用于支持企业或组织的决策分析处理。" class="headerlink" title="数据仓库是一个面向主题的、集成的、相对稳定的、反映历史变化的数据集合，它用于支持企业或组织的决策分析处理。"></a>数据仓库是一个面向主题的、集成的、相对稳定的、反映历史变化的数据集合，它用于支持企业或组织的决策分析处理。</h4><h2 id="与数据库的不同-："><a href="#与数据库的不同-：" class="headerlink" title="==与数据库的不同==："></a>==与数据库的不同==：</h2><p>操作性数据库中的数据会经常的被增删改，而数据仓库的数据只是载入，然后提供查询功能。因此数据仓库中的数据更稳定，不易丢失。</p><p>数据仓库中存储历史数据，往往是几年前的数据，这些数据随时间不短累计，并且数据仓库中含有很多时间标识。</p><ul><li><h4 id="数据粒度不同"><a href="#数据粒度不同" class="headerlink" title="数据粒度不同"></a>数据粒度不同</h4></li><li><p>数据库存储的是操作型数据，是细节性的数据，是当前的数据，反映的是最后的修改结果。数据仓库是分析型的集成挥着汇总的数据，面向主题，保存着数据的所有历史状态—数据粒度问题。分析型数据操作往往关注的是综合性数据，但是操作型数据库中存放的是细节数据，如果在分析前对细节数据进行综合，会严重影响分析的效率。<br>因此，为了克服以上问题，使两种数据操作都能够有效的进行，就产生了数据仓库。</p></li><li><h4 id="数据生命周期不同。"><a href="#数据生命周期不同。" class="headerlink" title="数据生命周期不同。"></a>数据生命周期不同。</h4></li><li><p>数据库存的数据的生命周期比较短，不会保存很久的数据。数据仓库则需要历史数据来反映趋势的变化和数据分析。</p></li><li><h4 id="建模方法不同。"><a href="#建模方法不同。" class="headerlink" title="建模方法不同。"></a>建模方法不同。</h4><p>数据可以采用范式建模，不能有冗余。数据仓库的建模方法有DW范式建模（跟数据库的范式建模也不同）和DW维度建模等。可以存在冗余</p><h4 id="时间敏感度不同"><a href="#时间敏感度不同" class="headerlink" title="时间敏感度不同"></a>时间敏感度不同</h4><p>数据库的数据要求及时性非常高，数据仓库可以容忍数据的一定的延迟</p><h4 id="目标不同"><a href="#目标不同" class="headerlink" title="目标不同"></a>目标不同</h4><p>数据库主要面向业务处理的，而数据仓库则面向分析用户</p></li><li><h4 id="操作不同："><a href="#操作不同：" class="headerlink" title="操作不同："></a>操作不同：</h4></li><li><h6 id="两种数据处理模式对应着两类数据：操作型数据和分析型数据。"><a href="#两种数据处理模式对应着两类数据：操作型数据和分析型数据。" class="headerlink" title="两种数据处理模式对应着两类数据：操作型数据和分析型数据。"></a>两种数据处理模式对应着两类数据：操作型数据和分析型数据。</h6><p>​    </p></li></ul><p><img src="https://images.cnblogs.com/cnblogs_com/hbsygfz/726837/o_1.png" alt="两类数据的比较"></p><p><strong>操作型数据处理</strong>主要应用于企业的日常事务处理工作，数据库中存放的是细节的数据，也是当前的数据，反映的是最近一次修改后的结果。对数据的操作主要是数据的增删查改。数据库中的数据是可以修改的。数据的组织以方便事务处理、提高事务处理性能为目标。<br><strong>分析型数据处理</strong>主要应用于企业的管理工作，数据库中主要存放的是历史数据和综合数据。对数据的操作主要集中在查询和统计分析，需要涉及大量数据，数据的组织方式以方面查询分析为主要目标，为了提高查询效率允许存在某种程度上的数据冗余。</p><p><img src="/2019/02/02/data-warehouse/EBD8D0C9EBC24A6F2A8E415BC70F9895.png" alt="img"></p><hr><h2 id="根据其出现的先后顺序，主要分为2种模式：自顶向下（TOP-down）-自底向上（Bottom-up）"><a href="#根据其出现的先后顺序，主要分为2种模式：自顶向下（TOP-down）-自底向上（Bottom-up）" class="headerlink" title="根据其出现的先后顺序，主要分为2种模式：自顶向下（TOP-down）,自底向上（Bottom-up）."></a>根据其出现的先后顺序，主要分为2种模式：自顶向下（TOP-down）,自底向上（Bottom-up）.</h2><h4 id="自顶向下-开发企业数据仓库是从总体上把握整个数据仓库的规模、粒度的级别和元数据管理，是一种系统的解决方法，并能够最大限度地减少集成问题。然而，它费用高，需要长时间开发，并且缺乏灵活性，因为整个组织的共同数据模型达到一致是很困难的。"><a href="#自顶向下-开发企业数据仓库是从总体上把握整个数据仓库的规模、粒度的级别和元数据管理，是一种系统的解决方法，并能够最大限度地减少集成问题。然而，它费用高，需要长时间开发，并且缺乏灵活性，因为整个组织的共同数据模型达到一致是很困难的。" class="headerlink" title="==自顶向下==开发企业数据仓库是从总体上把握整个数据仓库的规模、粒度的级别和元数据管理，是一种系统的解决方法，并能够最大限度地减少集成问题。然而，它费用高，需要长时间开发，并且缺乏灵活性，因为整个组织的共同数据模型达到一致是很困难的。"></a>==自顶向下==开发企业数据仓库是从总体上把握整个数据仓库的规模、粒度的级别和元数据管理，是一种系统的解决方法，并能够最大限度地减少集成问题。然而，它费用高，需要长时间开发，并且缺乏灵活性，因为整个组织的共同数据模型达到一致是很困难的。</h4><h4 id="自底向上-设计、开发、部署独立的数据集市提供了灵活性，花费低，并能够得到快速的投资回报。但存在的问题是将分散的数据集市集成，形成一个一致的企业数据仓库并不容易。"><a href="#自底向上-设计、开发、部署独立的数据集市提供了灵活性，花费低，并能够得到快速的投资回报。但存在的问题是将分散的数据集市集成，形成一个一致的企业数据仓库并不容易。" class="headerlink" title="==自底向上==设计、开发、部署独立的数据集市提供了灵活性，花费低，并能够得到快速的投资回报。但存在的问题是将分散的数据集市集成，形成一个一致的企业数据仓库并不容易。"></a>==自底向上==设计、开发、部署独立的数据集市提供了灵活性，花费低，并能够得到快速的投资回报。但存在的问题是将分散的数据集市集成，形成一个一致的企业数据仓库并不容易。</h4><blockquote><h4 id="一、-自顶向下（TOP-down）：这种模式首先把OLTP数据通过ETL汇集到数据仓库中，然后再把数据通过复制的方式推进各个数据集市中"><a href="#一、-自顶向下（TOP-down）：这种模式首先把OLTP数据通过ETL汇集到数据仓库中，然后再把数据通过复制的方式推进各个数据集市中" class="headerlink" title="一、 自顶向下（TOP-down）：这种模式首先把OLTP数据通过ETL汇集到数据仓库中，然后再把数据通过复制的方式推进各个数据集市中"></a>一、 自顶向下（TOP-down）：这种模式首先把OLTP数据通过ETL汇集到数据仓库中，然后再把数据通过复制的方式推进各个数据集市中</h4><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><h5 id="1、数据来源固定，可以确保数据的完整性。"><a href="#1、数据来源固定，可以确保数据的完整性。" class="headerlink" title="1、数据来源固定，可以确保数据的完整性。"></a>1、数据来源固定，可以确保数据的完整性。</h5><h5 id="2、数据格式与单位一致，可以确保跨越不同数据集市进行分析的正确性。"><a href="#2、数据格式与单位一致，可以确保跨越不同数据集市进行分析的正确性。" class="headerlink" title="2、数据格式与单位一致，可以确保跨越不同数据集市进行分析的正确性。"></a>2、数据格式与单位一致，可以确保跨越不同数据集市进行分析的正确性。</h5><h5 id="3、数据集市可以保证有共享的字段。因为都是从数据仓库中分离出来的。"><a href="#3、数据集市可以保证有共享的字段。因为都是从数据仓库中分离出来的。" class="headerlink" title="3、数据集市可以保证有共享的字段。因为都是从数据仓库中分离出来的。"></a>3、数据集市可以保证有共享的字段。因为都是从数据仓库中分离出来的。</h5><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><h5 id="1、对系统分析和设计人员的要求较高"><a href="#1、对系统分析和设计人员的要求较高" class="headerlink" title="1、对系统分析和设计人员的要求较高"></a>1、对系统分析和设计人员的要求较高</h5><h5 id="2、开发周期长，系统复杂度高"><a href="#2、开发周期长，系统复杂度高" class="headerlink" title="2、开发周期长，系统复杂度高"></a>2、开发周期长，系统复杂度高</h5></blockquote><blockquote><h5 id="自底向上（Bottom-up）：这种模式首先将OLTP数据通过ETL汇集到数据集市中，然后通过复制的方式提升到数据仓库中。"><a href="#自底向上（Bottom-up）：这种模式首先将OLTP数据通过ETL汇集到数据集市中，然后通过复制的方式提升到数据仓库中。" class="headerlink" title="自底向上（Bottom-up）：这种模式首先将OLTP数据通过ETL汇集到数据集市中，然后通过复制的方式提升到数据仓库中。"></a>自底向上（Bottom-up）：这种模式首先将OLTP数据通过ETL汇集到数据集市中，然后通过复制的方式提升到数据仓库中。</h5><h4 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h4><h5 id="1、由于首先构建数据集市的工作相对简单，所以容易成功。"><a href="#1、由于首先构建数据集市的工作相对简单，所以容易成功。" class="headerlink" title="1、由于首先构建数据集市的工作相对简单，所以容易成功。"></a>1、由于首先构建数据集市的工作相对简单，所以容易成功。</h5><h5 id="2、这种模式也是实现快速数据传送的原型。"><a href="#2、这种模式也是实现快速数据传送的原型。" class="headerlink" title="2、这种模式也是实现快速数据传送的原型。"></a>2、这种模式也是实现快速数据传送的原型。</h5><h5 id="3、数据仓库和数据集市："><a href="#3、数据仓库和数据集市：" class="headerlink" title="3、数据仓库和数据集市："></a>3、数据仓库和数据集市：</h5><h4 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h4><h5 id="1、由于方法的演变性质，信息系统难以实现其整体性"><a href="#1、由于方法的演变性质，信息系统难以实现其整体性" class="headerlink" title="1、由于方法的演变性质，信息系统难以实现其整体性"></a>1、由于方法的演变性质，信息系统难以实现其整体性</h5><h5 id="2、由于系统未进行全局规划，系抄统的数据一致性和完整性难以保证"><a href="#2、由于系统未进行全局规划，系抄统的数据一致性和完整性难以保证" class="headerlink" title="2、由于系统未进行全局规划，系抄统的数据一致性和完整性难以保证"></a>2、由于系统未进行全局规划，系抄统的数据一致性和完整性难以保证</h5><h5 id="3、为了达到系统的性能要求，往往不得不重新调整系统，甚至要重新设计系统"><a href="#3、为了达到系统的性能要求，往往不得不重新调整系统，甚至要重新设计系统" class="headerlink" title="3、为了达到系统的性能要求，往往不得不重新调整系统，甚至要重新设计系统"></a>3、为了达到系统的性能要求，往往不得不重新调整系统，甚至要重新设计系统</h5><h5 id="4、由于系统实施的分散性和演变性，系统框架难以把握，集成难度高，因而与企业目标的联系往往是间接-的，系-统往往难以支持企业的整体战略目标"><a href="#4、由于系统实施的分散性和演变性，系统框架难以把握，集成难度高，因而与企业目标的联系往往是间接-的，系-统往往难以支持企业的整体战略目标" class="headerlink" title="4、由于系统实施的分散性和演变性，系统框架难以把握，集成难度高，因而与企业目标的联系往往是间接        的，系      统往往难以支持企业的整体战略目标"></a>4、由于系统实施的分散性和演变性，系统框架难以把握，集成难度高，因而与企业目标的联系往往是间接        的，系      统往往难以支持企业的整体战略目标</h5><h5 id="5、在大型管理信息系统的开发中，容易造成系统结构不合理、各部分失调等问题"><a href="#5、在大型管理信息系统的开发中，容易造成系统结构不合理、各部分失调等问题" class="headerlink" title="5、在大型管理信息系统的开发中，容易造成系统结构不合理、各部分失调等问题"></a>5、在大型管理信息系统的开发中，容易造成系统结构不合理、各部分失调等问题</h5><h5 id="6、仍然需要采用软件生命周期法对系统进行结构化分析"><a href="#6、仍然需要采用软件生命周期法对系统进行结构化分析" class="headerlink" title="6、仍然需要采用软件生命周期法对系统进行结构化分析"></a>6、仍然需要采用软件生命周期法对系统进行结构化分析</h5></blockquote><h3 id="所以，具体到本材料中，我认为自底向上的构建方式更加合适！"><a href="#所以，具体到本材料中，我认为自底向上的构建方式更加合适！" class="headerlink" title="所以，具体到本材料中，我认为自底向上的构建方式更加合适！"></a>所以，具体到本材料中，我认为自底向上的构建方式更加合适！</h3><hr><h4 id=""><a href="#" class="headerlink" title=""></a><img src="/2019/02/02/data-warehouse/image-20200428185617281.png" alt="image-20200428185617281"></h4><p><img src="/2019/02/02/data-warehouse/image-20200501114800559.png" alt="image-20200501114800559"></p><p><img src="/2019/02/02/data-warehouse/image-20200501114918803.png" alt="image-20200501114918803"></p><p><img src="/2019/02/02/data-warehouse/image-20200501115037831.png" alt="image-20200501115037831"></p><p><img src="/2019/02/02/data-warehouse/image-20200501115230623.png" alt="image-20200501115230623"></p><h3 id="3NF-关系模式设计-：每个实体作为一张表，每个多端的实体增加另外一端的主键作为外键，即可。"><a href="#3NF-关系模式设计-：每个实体作为一张表，每个多端的实体增加另外一端的主键作为外键，即可。" class="headerlink" title="==3NF  关系模式设计==：每个实体作为一张表，每个多端的实体增加另外一端的主键作为外键，即可。"></a>==3NF  关系模式设计==：<em>每个实体作为一张表，每个多端的实体增加另外一端的主键作为外键，即可。</em></h3><h3 id="首先分单主键表和联合主键表分析：单主键表的“部门表”、“读者表”、“级别表”、“馆藏图书表”和“书目表”中，单主键并不考虑“2NF”情况，即他们都满足第一范式，然后再看关联主键是否满足”3NF”，通过观察，题目中的数据表都满足三个范式，所以易建立3NF关系模式如下-："><a href="#首先分单主键表和联合主键表分析：单主键表的“部门表”、“读者表”、“级别表”、“馆藏图书表”和“书目表”中，单主键并不考虑“2NF”情况，即他们都满足第一范式，然后再看关联主键是否满足”3NF”，通过观察，题目中的数据表都满足三个范式，所以易建立3NF关系模式如下-：" class="headerlink" title="[首先分单主键表和联合主键表分析：单主键表的“部门表”、“读者表”、“级别表”、“馆藏图书表”和“书目表”中，单主键并不考虑“2NF”情况，即他们都满足第一范式，然后再看关联主键是否满足”3NF”，通过观察，题目中的数据表都满足三个范式，所以易建立3NF关系模式如下]："></a>[首先分单主键表和联合主键表分析：单主键表的“部门表”、“读者表”、“级别表”、“馆藏图书表”和“书目表”中，单主键并不考虑“2NF”情况，即他们都满足第一范式，然后再看关联主键是否满足”3NF”，通过观察，题目中的数据表都满足三个范式，所以易建立3NF关系模式如下]：</h3><blockquote><h4 id="部门（部门编号、全称、简称）"><a href="#部门（部门编号、全称、简称）" class="headerlink" title="部门（部门编号、全称、简称）"></a>部门（<strong><u>部门编号</u></strong>、全称、简称）</h4><h4 id="借书记录（读者编号、图书条码、借书日期、到期日期、归还日期）"><a href="#借书记录（读者编号、图书条码、借书日期、到期日期、归还日期）" class="headerlink" title="借书记录（读者编号、图书条码、借书日期、到期日期、归还日期）"></a>借书记录（<u>读者编号</u>、<u>图书条码</u>、借书日期、到期日期、归还日期）</h4><h4 id="馆藏图书（图书条码、书目编号、卷号、年份、价格）"><a href="#馆藏图书（图书条码、书目编号、卷号、年份、价格）" class="headerlink" title="馆藏图书（图书条码、书目编号、卷号、年份、价格）"></a>馆藏图书（<u>图书条码</u>、书目编号、卷号、年份、价格）</h4><h4 id="书目（书目编号、分类号、出版年、语种、书名及作者、出版地、出版社、出版日期）"><a href="#书目（书目编号、分类号、出版年、语种、书名及作者、出版地、出版社、出版日期）" class="headerlink" title="书目（书目编号、分类号、出版年、语种、书名及作者、出版地、出版社、出版日期）"></a>书目（<u>书目编号</u>、分类号、出版年、语种、书名及作者、出版地、出版社、出版日期）</h4><h4 id="读者（读者编号、部门编号、级别、性别、出生日期、办证日期）"><a href="#读者（读者编号、部门编号、级别、性别、出生日期、办证日期）" class="headerlink" title="读者（读者编号、部门编号、级别、性别、出生日期、办证日期）"></a>读者（<u>读者编号</u>、部门编号、级别、性别、出生日期、办证日期）</h4><h4 id="级别（级别、全称、简称）"><a href="#级别（级别、全称、简称）" class="headerlink" title="级别（级别、全称、简称）"></a>级别（<u>级别</u>、全称、简称）</h4><h4 id="预约记录（书目编号、读者编号、预约日期、取消日期、完成日期）"><a href="#预约记录（书目编号、读者编号、预约日期、取消日期、完成日期）" class="headerlink" title="预约记录（书目编号、读者编号、预约日期、取消日期、完成日期）"></a>预约记录（<u>书目编号</u>、<u>读者编号</u>、预约日期、取消日期、完成日期）</h4></blockquote><h4 id="【其实范式的规范化就是解决“数据冗余”的过程，整个数据表关系其实大致已经没有冗余，照写就是了】"><a href="#【其实范式的规范化就是解决“数据冗余”的过程，整个数据表关系其实大致已经没有冗余，照写就是了】" class="headerlink" title="【其实范式的规范化就是解决“数据冗余”的过程，整个数据表关系其实大致已经没有冗余，照写就是了】"></a><code>【其实范式的规范化就是解决“数据冗余”的过程，整个数据表关系其实大致已经没有冗余，照写就是了】</code></h4><hr><h2 id="维度表与事实表："><a href="#维度表与事实表：" class="headerlink" title="==维度表与事实表：=="></a>==维度表与事实表：==</h2><p><img src="/2019/02/02/data-warehouse/image-20200501132916560.png" alt="image-20200501132916560"></p><p><img src="/2019/02/02/data-warehouse/image-20200501135330799.png" alt="image-20200501135330799"></p><p><img src="/2019/02/02/data-warehouse/image-20200501135342642.png" alt="image-20200501135342642"></p><h2 id="维度基本设计方法："><a href="#维度基本设计方法：" class="headerlink" title="维度基本设计方法："></a>维度基本设计方法：</h2><p><img src="https://upload-images.jianshu.io/upload_images/5401760-3f23dbbaf9d5f3d8.png" alt="img"></p><h2 id="设计步骤："><a href="#设计步骤：" class="headerlink" title="==设计步骤：=="></a>==设计步骤：==</h2><h4 id="第一步-选取业务处理"><a href="#第一步-选取业务处理" class="headerlink" title="第一步 选取业务处理"></a><strong>第一步 选取业务处理</strong></h4><h4 id="第二步-定义粒度"><a href="#第二步-定义粒度" class="headerlink" title="第二步 定义粒度"></a><strong>第二步 定义粒度</strong></h4><h4 id="第三步-选定维度"><a href="#第三步-选定维度" class="headerlink" title="第三步 选定维度"></a><strong>第三步 选定维度</strong></h4><h4 id="第四步-确定事实"><a href="#第四步-确定事实" class="headerlink" title="第四步 确定事实"></a><strong>第四步 确定事实</strong></h4><h4 id="在一个设计合理的维度模型中，维度表有许多列或者属性，这些属性给出对维度表的行所进行的描述。应该尽可能多地包括一些富有意义的文字性描述。"><a href="#在一个设计合理的维度模型中，维度表有许多列或者属性，这些属性给出对维度表的行所进行的描述。应该尽可能多地包括一些富有意义的文字性描述。" class="headerlink" title="==在一个设计合理的维度模型中，维度表有许多列或者属性，这些属性给出对维度表的行所进行的描述。应该尽可能多地包括一些富有意义的文字性描述。=="></a>==在一个设计合理的维度模型中，维度表有许多列或者属性，这些属性给出对维度表的行所进行的描述。应该尽可能多地包括一些富有意义的文字性描述。==</h4><h4 id="在事实表的设计时，一定要注意一个事实表只能有一个粒度，不能将不同粒度的事实建立在同一张事实表中。"><a href="#在事实表的设计时，一定要注意一个事实表只能有一个粒度，不能将不同粒度的事实建立在同一张事实表中。" class="headerlink" title="==在事实表的设计时，一定要注意一个事实表只能有一个粒度，不能将不同粒度的事实建立在同一张事实表中。=="></a>==在事实表的设计时，一定要注意一个事实表只能有一个粒度，不能将不同粒度的事实建立在同一张事实表中。==</h4><h3 id="数据仓库中常见的模型有：范式建模，雪花模型，星型建模，事实星座模型"><a href="#数据仓库中常见的模型有：范式建模，雪花模型，星型建模，事实星座模型" class="headerlink" title="数据仓库中常见的模型有：范式建模，雪花模型，星型建模，事实星座模型."></a>数据仓库中常见的模型有：范式建模，雪花模型，星型建模，事实星座模型.</h3><blockquote><h4 id="星型模型-是数据集市维度建模中推荐的建模方法。星型模型是以事实表为中心，所有的维度表直接连接在事实表上，像星星一样。星型模型的特点是数据组织直观，执行效率高。因为在数据集市的建设过程中，数据经过了预处理，比如按照维度进行了汇总，排序等等，数据量减少，执行的效率就比较高。"><a href="#星型模型-是数据集市维度建模中推荐的建模方法。星型模型是以事实表为中心，所有的维度表直接连接在事实表上，像星星一样。星型模型的特点是数据组织直观，执行效率高。因为在数据集市的建设过程中，数据经过了预处理，比如按照维度进行了汇总，排序等等，数据量减少，执行的效率就比较高。" class="headerlink" title="==星型模型==是数据集市维度建模中推荐的建模方法。星型模型是以事实表为中心，所有的维度表直接连接在事实表上，像星星一样。星型模型的特点是数据组织直观，执行效率高。因为在数据集市的建设过程中，数据经过了预处理，比如按照维度进行了汇总，排序等等，数据量减少，执行的效率就比较高。"></a>==星型模型==是数据集市维度建模中推荐的建模方法。星型模型是以事实表为中心，所有的维度表直接连接在事实表上，像星星一样。星型模型的特点是数据组织直观，执行效率高。因为在数据集市的建设过程中，数据经过了预处理，比如按照维度进行了汇总，排序等等，数据量减少，执行的效率就比较高。</h4><h4 id="雪花模型-也是维度建模中的一种选择。雪花模型的维度表可以拥有其他维度表的，虽然这种模型相比星型模型更规范一些，但是由于这种模型不太容易理解，维护成本比较高，而且性能方面需要关联多层维表，性能也比星型模型要低。所以一般不是很常用。"><a href="#雪花模型-也是维度建模中的一种选择。雪花模型的维度表可以拥有其他维度表的，虽然这种模型相比星型模型更规范一些，但是由于这种模型不太容易理解，维护成本比较高，而且性能方面需要关联多层维表，性能也比星型模型要低。所以一般不是很常用。" class="headerlink" title="==雪花模型==也是维度建模中的一种选择。雪花模型的维度表可以拥有其他维度表的，虽然这种模型相比星型模型更规范一些，但是由于这种模型不太容易理解，维护成本比较高，而且性能方面需要关联多层维表，性能也比星型模型要低。所以一般不是很常用。"></a>==雪花模型==也是维度建模中的一种选择。雪花模型的维度表可以拥有其他维度表的，虽然这种模型相比星型模型更规范一些，但是由于这种模型不太容易理解，维护成本比较高，而且性能方面需要关联多层维表，性能也比星型模型要低。所以一般不是很常用。</h4><h4 id="第三范式建模-是在数据库建模中使用的建模方法，特点是体系化，扩展性好，避免冗余，避免更新异常。所以，在数据仓库的EDW层建模中，我们也提倡使用第三范式建模。但是数据仓库的集成和反映历史变化的特征意味着数据量非常之大，表和表之间的关联效率比较低，所以有些时候完全规范的范式建模并不是最好的选择，通常我们会选择非规范化处理，增加一些冗余的字段来避免表之间关联的次数，这样会节约大量的时间。"><a href="#第三范式建模-是在数据库建模中使用的建模方法，特点是体系化，扩展性好，避免冗余，避免更新异常。所以，在数据仓库的EDW层建模中，我们也提倡使用第三范式建模。但是数据仓库的集成和反映历史变化的特征意味着数据量非常之大，表和表之间的关联效率比较低，所以有些时候完全规范的范式建模并不是最好的选择，通常我们会选择非规范化处理，增加一些冗余的字段来避免表之间关联的次数，这样会节约大量的时间。" class="headerlink" title="==第三范式建模==是在数据库建模中使用的建模方法，特点是体系化，扩展性好，避免冗余，避免更新异常。所以，在数据仓库的EDW层建模中，我们也提倡使用第三范式建模。但是数据仓库的集成和反映历史变化的特征意味着数据量非常之大，表和表之间的关联效率比较低，所以有些时候完全规范的范式建模并不是最好的选择，通常我们会选择非规范化处理，增加一些冗余的字段来避免表之间关联的次数，这样会节约大量的时间。"></a>==第三范式建模==是在数据库建模中使用的建模方法，特点是体系化，扩展性好，避免冗余，避免更新异常。所以，在数据仓库的EDW层建模中，我们也提倡使用第三范式建模。但是数据仓库的集成和反映历史变化的特征意味着数据量非常之大，表和表之间的关联效率比较低，所以有些时候完全规范的范式建模并不是最好的选择，通常我们会选择非规范化处理，增加一些冗余的字段来避免表之间关联的次数，这样会节约大量的时间。</h4><h4 id="雪花模型是介于星型模型和范式建模之间的。个人理解，范式建模和雪花模型的区别在于雪花模型在维度上也是有冗余的。例如雪花模型例图的地域维度不符合第三范式，因为地域维度中存在传递依赖，城市-省级-国家-地域。"><a href="#雪花模型是介于星型模型和范式建模之间的。个人理解，范式建模和雪花模型的区别在于雪花模型在维度上也是有冗余的。例如雪花模型例图的地域维度不符合第三范式，因为地域维度中存在传递依赖，城市-省级-国家-地域。" class="headerlink" title="雪花模型是介于星型模型和范式建模之间的。个人理解，范式建模和雪花模型的区别在于雪花模型在维度上也是有冗余的。例如雪花模型例图的地域维度不符合第三范式，因为地域维度中存在传递依赖，城市-省级-国家-地域。"></a>雪花模型是介于星型模型和范式建模之间的。个人理解，范式建模和雪花模型的区别在于雪花模型在维度上也是有冗余的。例如雪花模型例图的地域维度不符合第三范式，因为地域维度中存在传递依赖，城市-省级-国家-地域。</h4><h4 id="星座模型-是星型模型延伸而来，星型模型是基于一张事实表的，而星座模型是基于多张事实表的，而且共享维度信息。-通过构建一致性维度，来建设星座模型，也是很好的选择。比如同一主题的细节表和汇总表共享维度，不同主题的事实表，可以通过在维度上互相补充来生成可以共享的维度。"><a href="#星座模型-是星型模型延伸而来，星型模型是基于一张事实表的，而星座模型是基于多张事实表的，而且共享维度信息。-通过构建一致性维度，来建设星座模型，也是很好的选择。比如同一主题的细节表和汇总表共享维度，不同主题的事实表，可以通过在维度上互相补充来生成可以共享的维度。" class="headerlink" title="==星座模型==是星型模型延伸而来，星型模型是基于一张事实表的，而星座模型是基于多张事实表的，而且共享维度信息。 通过构建一致性维度，来建设星座模型，也是很好的选择。比如同一主题的细节表和汇总表共享维度，不同主题的事实表，可以通过在维度上互相补充来生成可以共享的维度。"></a>==星座模型==是星型模型延伸而来，星型模型是基于一张事实表的，而星座模型是基于多张事实表的，而且共享维度信息。 通过构建一致性维度，来建设星座模型，也是很好的选择。比如同一主题的细节表和汇总表共享维度，不同主题的事实表，可以通过在维度上互相补充来生成可以共享的维度。</h4></blockquote><h2 id="度量、粒度、事实表、维度、维度分析："><a href="#度量、粒度、事实表、维度、维度分析：" class="headerlink" title="度量、粒度、事实表、维度、维度分析："></a>度量、粒度、事实表、维度、维度分析：</h2><p><img src="/2019/02/02/data-warehouse/image-20200430220939525.png" alt="image-20200430220939525"></p><p><img src="/2019/02/02/data-warehouse/image-20200430221012597.png" alt="image-20200430221012597"></p><p><img src="/2019/02/02/data-warehouse/image-20200430221035409.png" alt="image-20200430221035409"></p><p><img src="/2019/02/02/data-warehouse/image-20200430221116788.png" alt="image-20200430221116788"></p><p><img src="/2019/02/02/data-warehouse/image-20200430221140938.png" alt="image-20200430221140938"></p><h2 id="维度建模："><a href="#维度建模：" class="headerlink" title="==维度建模：=="></a>==维度建模：==</h2><p><img src="/2019/02/02/data-warehouse/image-20200430221409455.png" alt="image-20200430221409455"></p><p><img src="/2019/02/02/data-warehouse/image-20200501133222817.png" alt="image-20200501133222817"></p><h1 id="维度模型优点："><a href="#维度模型优点：" class="headerlink" title="==维度模型优点：=="></a>==维度模型优点：==</h1><ol><li><h4 id="数据冗余小（因为很多具体的信息都存在相应的维度表中了，比如用户信息就只有一份）"><a href="#数据冗余小（因为很多具体的信息都存在相应的维度表中了，比如用户信息就只有一份）" class="headerlink" title="数据冗余小（因为很多具体的信息都存在相应的维度表中了，比如用户信息就只有一份）"></a>数据冗余小（因为很多具体的信息都存在相应的维度表中了，比如用户信息就只有一份）</h4></li><li><h4 id="结构清晰（表结构一目了然）"><a href="#结构清晰（表结构一目了然）" class="headerlink" title="结构清晰（表结构一目了然）"></a>结构清晰（表结构一目了然）</h4></li><li><h4 id="便于做OLAP分析（数据分析用起来会很开心）"><a href="#便于做OLAP分析（数据分析用起来会很开心）" class="headerlink" title="便于做OLAP分析（数据分析用起来会很开心）"></a>便于做OLAP分析（数据分析用起来会很开心）</h4></li><li><h4 id="增加使用成本，比如查询时要关联多张表"><a href="#增加使用成本，比如查询时要关联多张表" class="headerlink" title="增加使用成本，比如查询时要关联多张表"></a>增加使用成本，比如查询时要关联多张表</h4></li><li><h4 id="数据不一致，比如用户发起购买行为的时候的数据，和我们维度表里面存放的数据不一致"><a href="#数据不一致，比如用户发起购买行为的时候的数据，和我们维度表里面存放的数据不一致" class="headerlink" title="数据不一致，比如用户发起购买行为的时候的数据，和我们维度表里面存放的数据不一致"></a>数据不一致，比如用户发起购买行为的时候的数据，和我们维度表里面存放的数据不一致</h4></li></ol><h2 id="第四题答："><a href="#第四题答：" class="headerlink" title="==第四题答：=="></a>==第四题答：==</h2><h4 id="由题意应该知道：要满足对借还和预约数据的多维分析，则应该设计的是星座模型的多维度表："><a href="#由题意应该知道：要满足对借还和预约数据的多维分析，则应该设计的是星座模型的多维度表：" class="headerlink" title="由题意应该知道：要满足对借还和预约数据的多维分析，则应该设计的是星座模型的多维度表："></a>由题意应该知道：要满足对借还和预约数据的多维分析，则应该设计的是星座模型的多维度表：</h4><p><img src="/2019/02/02/data-warehouse/image-20200501205945556.png" alt="image-20200501205945556"></p><hr><p><img src="/2019/02/02/data-warehouse/image-20200428185627166.png" alt="image-20200428185627166"></p><h2 id="数据集市DM："><a href="#数据集市DM：" class="headerlink" title="==数据集市DM：=="></a>==数据集市DM：==</h2><p><img src="/2019/02/02/data-warehouse/image-20200501134912715.png" alt="image-20200501134912715"></p><h4 id="抽取、转换、加载过程的目的是为决策支持应用提供一个单一的、权威数据源。"><a href="#抽取、转换、加载过程的目的是为决策支持应用提供一个单一的、权威数据源。" class="headerlink" title="==抽取、转换、加载过程的目的是为决策支持应用提供一个单一的、权威数据源。=="></a>==抽取、转换、加载过程的目的是为决策支持应用提供一个单一的、权威数据源。==</h4><p><img src="/2019/02/02/data-warehouse/image-20200428214011814.png" alt="image-20200428214011814"></p><p><img src="/2019/02/02/data-warehouse/image-20200428214306471.png" alt="image-20200428214306471"></p><p><img src="/2019/02/02/data-warehouse/image-20200428214617925.png" alt="image-20200428214617925"></p><p><img src="/2019/02/02/data-warehouse/image-20200428214810306.png" alt="image-20200428214810306"></p><p><img src="/2019/02/02/data-warehouse/image-20200428214919214.png" alt=""></p><p><img src="/2019/02/02/data-warehouse/image-20200428215019568.png" alt="image-20200428215019568"></p><p><img src="/2019/02/02/data-warehouse/image-20200428215105042.png" alt="image-20200428215105042"></p><p><img src="/2019/02/02/data-warehouse/image-20200428215121926.png" alt="image-20200428215121926"></p><p><img src="/2019/02/02/data-warehouse/image-20200428215141941.png" alt="image-20200428215141941"></p><p><img src="/2019/02/02/data-warehouse/image-20200428215340732.png" alt="image-20200428215340732"></p><p><img src="/2019/02/02/data-warehouse/image-20200428215722808.png" alt="image-20200428215722808"></p><p><img src="/2019/02/02/data-warehouse/image-20200428215831449.png" alt="image-20200428215831449"></p><p><img src="/2019/02/02/data-warehouse/image-20200501115504219.png" alt="image-20200501115504219"></p><h1 id="DB、DW、DM、DOS-联系、区别："><a href="#DB、DW、DM、DOS-联系、区别：" class="headerlink" title="DB、DW、DM、DOS 联系、区别："></a>DB、DW、DM、DOS 联系、区别：</h1><h4 id="数据库-：传统的关系型数据库的主要应用，主要是基本的、日常的事务处理，例如银行交易。"><a href="#数据库-：传统的关系型数据库的主要应用，主要是基本的、日常的事务处理，例如银行交易。" class="headerlink" title="==数据库==：传统的关系型数据库的主要应用，主要是基本的、日常的事务处理，例如银行交易。"></a>==数据库==：传统的关系型数据库的主要应用，主要是基本的、日常的事务处理，例如银行交易。</h4><h4 id="数据仓库-：数据仓库系统的主要应用主要是OLAP（On-Line-Analytical-Processing），支持复杂的分析操作，侧重决策支持，并且提供直观易懂的查询结果。"><a href="#数据仓库-：数据仓库系统的主要应用主要是OLAP（On-Line-Analytical-Processing），支持复杂的分析操作，侧重决策支持，并且提供直观易懂的查询结果。" class="headerlink" title="==数据仓库==：数据仓库系统的主要应用主要是OLAP（On-Line Analytical Processing），支持复杂的分析操作，侧重决策支持，并且提供直观易懂的查询结果。"></a>==数据仓库==：数据仓库系统的主要应用主要是OLAP（On-Line Analytical Processing），支持复杂的分析操作，侧重决策支持，并且提供直观易懂的查询结果。</h4><p><img src="/2019/02/02/data-warehouse/image-20200501132722420.png" alt="image-20200501132722420"></p><blockquote><h3 id="数据仓库特征："><a href="#数据仓库特征：" class="headerlink" title="数据仓库特征："></a>数据仓库特征：</h3><h4 id="效率足够高，要对进入的数据快速处理。"><a href="#效率足够高，要对进入的数据快速处理。" class="headerlink" title="*效率足够高，要对进入的数据快速处理。"></a>*效率足够高，要对进入的数据快速处理。</h4><h4 id="数据质量高，数据仓库是提供很多决策需要的数据支撑，DW的数据应该是唯一的具有权威性的数据，企业的所有系统只能从DW取数据，所以需要定期对DW里面的数据进行质量审，保证DW里边数据的唯一、权威、准确性。"><a href="#数据质量高，数据仓库是提供很多决策需要的数据支撑，DW的数据应该是唯一的具有权威性的数据，企业的所有系统只能从DW取数据，所以需要定期对DW里面的数据进行质量审，保证DW里边数据的唯一、权威、准确性。" class="headerlink" title="*数据质量高，数据仓库是提供很多决策需要的数据支撑，DW的数据应该是唯一的具有权威性的数据，企业的所有系统只能从DW取数据，所以需要定期对DW里面的数据进行质量审，保证DW里边数据的唯一、权威、准确性。"></a>*数据质量高，数据仓库是提供很多决策需要的数据支撑，DW的数据应该是唯一的具有权威性的数据，企业的所有系统只能从DW取数据，所以需要定期对DW里面的数据进行质量审，保证DW里边数据的唯一、权威、准确性。</h4><h4 id="扩展性，企业业务扩展和降低企业建设数据仓库的成本考虑"><a href="#扩展性，企业业务扩展和降低企业建设数据仓库的成本考虑" class="headerlink" title="*扩展性，企业业务扩展和降低企业建设数据仓库的成本考虑"></a>*扩展性，企业业务扩展和降低企业建设数据仓库的成本考虑</h4><h4 id="面向主题，数据仓库中的数据是按照一定的主题域进行组织的，每一个主题对应一个宏观的分析领域，数据仓库排除对决策无用的数据，提供特定主题的简明视图。"><a href="#面向主题，数据仓库中的数据是按照一定的主题域进行组织的，每一个主题对应一个宏观的分析领域，数据仓库排除对决策无用的数据，提供特定主题的简明视图。" class="headerlink" title="*面向主题，数据仓库中的数据是按照一定的主题域进行组织的，每一个主题对应一个宏观的分析领域，数据仓库排除对决策无用的数据，提供特定主题的简明视图。"></a>*面向主题，数据仓库中的数据是按照一定的主题域进行组织的，每一个主题对应一个宏观的分析领域，数据仓库排除对决策无用的数据，提供特定主题的简明视图。</h4><h4 id="数据仓库主要提供查询服务，并且需要查询能够及时响应"><a href="#数据仓库主要提供查询服务，并且需要查询能够及时响应" class="headerlink" title="*数据仓库主要提供查询服务，并且需要查询能够及时响应"></a>*数据仓库主要提供查询服务，并且需要查询能够及时响应</h4><h4 id="DW的数据也是只允许增加不允许删除和修改，数据仓库主要是提供查询服务，删除和修改在分布式系统"><a href="#DW的数据也是只允许增加不允许删除和修改，数据仓库主要是提供查询服务，删除和修改在分布式系统" class="headerlink" title="*DW的数据也是只允许增加不允许删除和修改，数据仓库主要是提供查询服务，删除和修改在分布式系统."></a>*DW的数据也是只允许增加不允许删除和修改，数据仓库主要是提供查询服务，删除和修改在分布式系统.</h4></blockquote><h4 id="数据处理大致可以分成两大类-：联机事务处理OLTP（on-line-transaction-processing）、联机分析处理OLAP（On-Line-Analytical-Processing）。"><a href="#数据处理大致可以分成两大类-：联机事务处理OLTP（on-line-transaction-processing）、联机分析处理OLAP（On-Line-Analytical-Processing）。" class="headerlink" title="==数据处理大致可以分成两大类==：联机事务处理OLTP（on-line transaction processing）、联机分析处理OLAP（On-Line Analytical Processing）。"></a>==数据处理大致可以分成两大类==：联机事务处理OLTP（on-line transaction processing）、联机分析处理OLAP（On-Line Analytical Processing）。</h4><p><img src="/2019/02/02/data-warehouse/image-20200501132742843.png" alt="image-20200501132742843"></p><h2 id="OLTP与OLAP："><a href="#OLTP与OLAP：" class="headerlink" title="==OLTP与OLAP：=="></a>==OLTP与OLAP：==</h2><h4 id="OLTP是传统的关系型数据库的主要应用，主要是基本的、日常的事务处理，例如银行交易。"><a href="#OLTP是传统的关系型数据库的主要应用，主要是基本的、日常的事务处理，例如银行交易。" class="headerlink" title="OLTP是传统的关系型数据库的主要应用，主要是基本的、日常的事务处理，例如银行交易。"></a>OLTP是传统的关系型数据库的主要应用，主要是基本的、日常的事务处理，例如银行交易。</h4><h4 id="OLAP是数据仓库系统的主要应用，支持复杂的分析操作，侧重决策支持，并且提供直观易懂的查询结果。"><a href="#OLAP是数据仓库系统的主要应用，支持复杂的分析操作，侧重决策支持，并且提供直观易懂的查询结果。" class="headerlink" title="OLAP是数据仓库系统的主要应用，支持复杂的分析操作，侧重决策支持，并且提供直观易懂的查询结果。"></a>OLAP是数据仓库系统的主要应用，支持复杂的分析操作，侧重决策支持，并且提供直观易懂的查询结果。</h4><h4 id="OLTP-系统强调数据库内存效率，强调内存各种指标的命令率，强调绑定变量，强调并发操作；"><a href="#OLTP-系统强调数据库内存效率，强调内存各种指标的命令率，强调绑定变量，强调并发操作；" class="headerlink" title="OLTP 系统强调数据库内存效率，强调内存各种指标的命令率，强调绑定变量，强调并发操作；"></a>OLTP 系统强调数据库内存效率，强调内存各种指标的命令率，强调绑定变量，强调并发操作；</h4><h4 id="OLAP-系统则强调数据分析，强调SQL执行市场，强调磁盘I-O，强调分区等。"><a href="#OLAP-系统则强调数据分析，强调SQL执行市场，强调磁盘I-O，强调分区等。" class="headerlink" title="OLAP 系统则强调数据分析，强调SQL执行市场，强调磁盘I/O，强调分区等。"></a>OLAP 系统则强调数据分析，强调SQL执行市场，强调磁盘I/O，强调分区等。</h4><p><img src="https://img-blog.csdn.net/20170413112215894?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd3V5YTgxNDA3MDkzNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="OLTP与OLAP的区别"></p><h1 id="ODS和ODS的工作过程"><a href="#ODS和ODS的工作过程" class="headerlink" title="ODS和ODS的工作过程"></a>ODS和ODS的工作过程</h1><h3 id="ODS（操作性数据）："><a href="#ODS（操作性数据）：" class="headerlink" title="ODS（操作性数据）："></a><strong>ODS</strong>（操作性数据）：</h3><h4 id="ODS：是一个面向主题的、集成的、可变的、当前的细节数据集合，用于支持企业对于即时性的、操作性的、集成的全体信息的需求。"><a href="#ODS：是一个面向主题的、集成的、可变的、当前的细节数据集合，用于支持企业对于即时性的、操作性的、集成的全体信息的需求。" class="headerlink" title="ODS：是一个面向主题的、集成的、可变的、当前的细节数据集合，用于支持企业对于即时性的、操作性的、集成的全体信息的需求。"></a>ODS：是一个面向主题的、集成的、可变的、当前的细节数据集合，用于支持企业对于即时性的、操作性的、集成的全体信息的需求。</h4><h3 id="工作过程："><a href="#工作过程：" class="headerlink" title="工作过程："></a>工作过程：</h3><h4 id="生产系统中的运营数据通过ETL（抽取、转换、装载）过程进人到ODS中，生产系统之间准实时的数据交换由ODS系统完成，ODS系统同时还将整合好的生产系统下的运营数据通过ETL等方式传送到EDW中，完成运营数据从操作环境进人到分析环境的过程。"><a href="#生产系统中的运营数据通过ETL（抽取、转换、装载）过程进人到ODS中，生产系统之间准实时的数据交换由ODS系统完成，ODS系统同时还将整合好的生产系统下的运营数据通过ETL等方式传送到EDW中，完成运营数据从操作环境进人到分析环境的过程。" class="headerlink" title="生产系统中的运营数据通过ETL（抽取、转换、装载）过程进人到ODS中，生产系统之间准实时的数据交换由ODS系统完成，ODS系统同时还将整合好的生产系统下的运营数据通过ETL等方式传送到EDW中，完成运营数据从操作环境进人到分析环境的过程。"></a>生产系统中的运营数据通过ETL（抽取、转换、装载）过程进人到ODS中，生产系统之间准实时的数据交换由ODS系统完成，ODS系统同时还将整合好的生产系统下的运营数据通过ETL等方式传送到EDW中，完成运营数据从操作环境进人到分析环境的过程。</h4><blockquote><h2 id="特征："><a href="#特征：" class="headerlink" title="特征："></a>特征：</h2><h4 id="·ODS直接存放从业务抽取过来的数据，这些数据从结构和数据上与业务系统保持一致，降低了数据抽取的复杂性。"><a href="#·ODS直接存放从业务抽取过来的数据，这些数据从结构和数据上与业务系统保持一致，降低了数据抽取的复杂性。" class="headerlink" title="·ODS直接存放从业务抽取过来的数据，这些数据从结构和数据上与业务系统保持一致，降低了数据抽取的复杂性。"></a>·ODS直接存放从业务抽取过来的数据，这些数据从结构和数据上与业务系统保持一致，降低了数据抽取的复杂性。</h4><h4 id="·转移一部分业务系统的细节查询功能，因为ODS存放的数据与业务系统相同，原来有业务系统产生的报表，现在可以从ODS中产生。"><a href="#·转移一部分业务系统的细节查询功能，因为ODS存放的数据与业务系统相同，原来有业务系统产生的报表，现在可以从ODS中产生。" class="headerlink" title="·转移一部分业务系统的细节查询功能，因为ODS存放的数据与业务系统相同，原来有业务系统产生的报表，现在可以从ODS中产生。"></a>·转移一部分业务系统的细节查询功能，因为ODS存放的数据与业务系统相同，原来有业务系统产生的报表，现在可以从ODS中产生。</h4><h4 id="·完成数据仓库中不能完成的功能，ODS存放的是明细数据，数据仓库DW或数据集市DM都存放的是汇聚数据，ODS提供查询明细的功能。"><a href="#·完成数据仓库中不能完成的功能，ODS存放的是明细数据，数据仓库DW或数据集市DM都存放的是汇聚数据，ODS提供查询明细的功能。" class="headerlink" title="·完成数据仓库中不能完成的功能，ODS存放的是明细数据，数据仓库DW或数据集市DM都存放的是汇聚数据，ODS提供查询明细的功能。"></a>·完成数据仓库中不能完成的功能，ODS存放的是明细数据，数据仓库DW或数据集市DM都存放的是汇聚数据，ODS提供查询明细的功能。</h4><h4 id="·ODS数据只能增加不能修改，而且数据都是业务系统原样拷贝，所以可能存在数据冲突的可能，解决办法是为每一条数据增加一个时间版本来区分相同的数据。"><a href="#·ODS数据只能增加不能修改，而且数据都是业务系统原样拷贝，所以可能存在数据冲突的可能，解决办法是为每一条数据增加一个时间版本来区分相同的数据。" class="headerlink" title="·ODS数据只能增加不能修改，而且数据都是业务系统原样拷贝，所以可能存在数据冲突的可能，解决办法是为每一条数据增加一个时间版本来区分相同的数据。"></a>·ODS数据只能增加不能修改，而且数据都是业务系统原样拷贝，所以可能存在数据冲突的可能，解决办法是为每一条数据增加一个时间版本来区分相同的数据。</h4></blockquote><h2 id="DM-Data-Mart-："><a href="#DM-Data-Mart-：" class="headerlink" title="DM(Data Mart)："></a>DM(Data Mart)：</h2><h4 id="DM-Data-Mart-数据集市-为了特定的应用目的或应用范围，而从数据仓库中独立出来的一部分数据，也可称为部门数据或主题数据。面向应用。"><a href="#DM-Data-Mart-数据集市-为了特定的应用目的或应用范围，而从数据仓库中独立出来的一部分数据，也可称为部门数据或主题数据。面向应用。" class="headerlink" title="DM(Data Mart) 数据集市,为了特定的应用目的或应用范围，而从数据仓库中独立出来的一部分数据，也可称为部门数据或主题数据。面向应用。"></a>DM(Data Mart) 数据集市,为了特定的应用目的或应用范围，而从数据仓库中独立出来的一部分数据，也可称为部门数据或主题数据。面向应用。</h4><blockquote><h3 id="特征：-1"><a href="#特征：-1" class="headerlink" title="特征："></a>特征：</h3><h4 id="·DM结构清晰，针对性强，扩展性好，因为DM仅仅是单对一个领域而建立，容易维护修改"><a href="#·DM结构清晰，针对性强，扩展性好，因为DM仅仅是单对一个领域而建立，容易维护修改" class="headerlink" title="·DM结构清晰，针对性强，扩展性好，因为DM仅仅是单对一个领域而建立，容易维护修改"></a>·DM结构清晰，针对性强，扩展性好，因为DM仅仅是单对一个领域而建立，容易维护修改</h4><h4 id="·DM建设任务繁重，公司有众多业务，每个业务单独建立表。"><a href="#·DM建设任务繁重，公司有众多业务，每个业务单独建立表。" class="headerlink" title="·DM建设任务繁重，公司有众多业务，每个业务单独建立表。"></a>·DM建设任务繁重，公司有众多业务，每个业务单独建立表。</h4><h4 id="·DM的建立更多的消耗存储空间，单独一个DM可能数据量不大，但是企业所有领域都建立DM这个数据量就会增加多倍。"><a href="#·DM的建立更多的消耗存储空间，单独一个DM可能数据量不大，但是企业所有领域都建立DM这个数据量就会增加多倍。" class="headerlink" title="·DM的建立更多的消耗存储空间，单独一个DM可能数据量不大，但是企业所有领域都建立DM这个数据量就会增加多倍。"></a>·DM的建立更多的消耗存储空间，单独一个DM可能数据量不大，但是企业所有领域都建立DM这个数据量就会增加多倍。</h4></blockquote><p><img src="https://img-blog.csdnimg.cn/20191218221928657.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMjMzNzA2,size_16,color_FFFFFF,t_70" alt="img"></p><h1 id="ODS与DW的区别主要有以下几点："><a href="#ODS与DW的区别主要有以下几点：" class="headerlink" title="ODS与DW的区别主要有以下几点："></a>ODS与DW的区别主要有以下几点：</h1><h3 id="1、数据的当前性"><a href="#1、数据的当前性" class="headerlink" title="1、数据的当前性"></a>1、数据的当前性</h3><p>ODS包括的是当前或接近当前的数据，ODS反映的是当前业务条件的状态，ODS的设计与用户或业务的需要是有关联的，而DW则是更多的反映业务条件的历史数据。</p><h3 id="2、数据的更新或加载"><a href="#2、数据的更新或加载" class="headerlink" title="2、数据的更新或加载"></a>2、数据的更新或加载</h3><p>ODS中的数据是可以进行修改的，而DW中的数据一般是不进行更新的。ODS的更新是根据业务的需要进行操作的，而没有必要立即更新，因此它需要一种实时或近实时的更新机制。另外，DW中的数据是按照正常的或预先指定的时间进行数据的收集和加载的。</p><h3 id="3、数据的汇总性"><a href="#3、数据的汇总性" class="headerlink" title="3、数据的汇总性"></a>3、数据的汇总性</h3><p>ODS主要是包括一些细节数据，但是由于性能的需要，可能还包括一些汇总数据，如果包括汇总数据，可能很难保证数据的当前性和准确性。ODS中的汇总数据生命周期比较短，所以可称作为动态汇总数据，如果细节数据经过了修改，则汇总数据同样需要修改。而DW中的数据可称为静态的汇总数据。</p><h3 id="4、数据建模"><a href="#4、数据建模" class="headerlink" title="4、数据建模"></a>4、数据建模</h3><p>ODS是站在记录层面访问的角度而设计的，DW或DM则是站在结果集层面访问的角度而设计的。ODS支持快速的数据更新，DW作为一个整体是面向查询的。</p><h3 id="5、查询的事务"><a href="#5、查询的事务" class="headerlink" title="5、查询的事务"></a>5、查询的事务</h3><p>ODS中的事务操作比较多，可能一天中会不断的执行相同的事务，而DW中事务的到达是可以预测的。</p><h3 id="6、用途"><a href="#6、用途" class="headerlink" title="6、用途"></a>6、用途</h3><p>ODS用于每一天的操作型决策，是一种短期的；DW可以获取一种长期的合作广泛的决策。ODS是策略型的，DW是战略型的。</p><h3 id="7、用户"><a href="#7、用户" class="headerlink" title="7、用户"></a>7、用户</h3><p>ODS主要用于策略型的用户，比如保险公司每天与客户交流的客服；而DW主要用于战略型的用户，比如公司的高层管理人员。</p><h3 id="8、数据量（主要区别之一）"><a href="#8、数据量（主要区别之一）" class="headerlink" title="8、数据量（主要区别之一）"></a>8、数据量（主要区别之一）</h3><p>ODS只是包括当前数据，而DW存储的是每一个主题的历史快照；</p><h2 id="数据挖掘的流程"><a href="#数据挖掘的流程" class="headerlink" title="==数据挖掘的流程=="></a><strong>==数据挖掘的流程==</strong></h2><p>数据挖掘(Knowledge Discovery in Database)数据库中知识发现，简称KDD。在数据挖掘中有几个非常中要的任务分别是分类，聚类，预测和关系分析。</p><p><strong>1.分类：</strong></p><p>就是通过训练集得到一个分类模型，然后用这个模型可以对其他数据进行分类。</p><p>​        <strong>训练集和测试集的概念：</strong></p><p>一般来说数据可以划分为训练集和测试集。<strong>训练集</strong>是用来给机器做训练的，通常是人们整理好训练数据，以及这些数据对应的分类标识。通过训练，机器就产生了自我分类的模型，然后机器就可以拿着这个分类模型，对<strong>测试集</strong>中的数据进行分类预测。同样如果测试集中，人们已经给出了测试结果，我们就可以用测试结果来做验证，从而了解分类器在测试环境下的表现。</p><p><strong>2.聚类：</strong></p><p>人以群分，物以类聚。聚类就是将数据自动聚类成几个类别，聚到一起的相似度大，不在一起的差异性大。我们往往利用聚类来做数据划分。</p><p><strong>3.预测：</strong></p><p>就是通过当前和历史数据来预测未来趋势，它可以更好地帮助我们识别机遇和风险。</p><p><strong>4.关系分析：</strong></p><p>就是发现数据中的关联规则，它被广泛应用在购物篮分析，或事务数据分析中。比如某宝中的物品绑定推送。</p><hr><h3 id="数据库中知识发现-KDD-过程："><a href="#数据库中知识发现-KDD-过程：" class="headerlink" title="数据库中知识发现(KDD)过程："></a><strong>数据库中知识发现(KDD)过程：</strong></h3><p>输入数据 –&gt; 数据预处理(特征选择，维规约，规范化，选择数据子集) –&gt; 数据挖掘 –&gt; 后处理(模式过滤，可视化，模式表示) –&gt; 信息</p><p>数据预处理时进行的步骤：</p><p><strong>1.数据清洗</strong></p><p>主要是为了去除重复数据，去噪声（即干扰数据）以及填充缺失值。</p><p><strong>2.数据集成</strong></p><p>是将多个数据源中的数据存放在一个统一的数据存储中。</p><p><strong>3.数据变换</strong></p><p>就是将数据转换成适合数据挖掘的形式。比如，通过归一化将属性数据按照比例缩放，这样就可以将数值落入一个特定的区间内，比如 0~1 之间。</p><h1 id="数据仓库分层："><a href="#数据仓库分层：" class="headerlink" title="数据仓库分层："></a>数据仓库分层：</h1><p><img src="/2019/02/02/data-warehouse/image-20200501132834673.png" alt="image-20200501132834673"></p><ol><li><h2 id="如何分层"><a href="#如何分层" class="headerlink" title="==如何分层=="></a>==如何分层==</h2></li><li><ul><li>结合Inmon和Kimball的集线器式和总线式的数据仓库的优点，分层为ODS【-MID】-DW-DM-OLAP/OLAM/app</li><li><strong>ODS层</strong>是将OLTP数据通过ETL同步到数据仓库来作为数据仓库最基础的数据来源。在这个过程中，数据经过了一定的清洗，比如字段的统一，脏数据的去除等，但是数据的粒度是不会变化的。ODS层的数据可以只保留一定的时间。</li><li><strong>MID中间层</strong>是采用Inmon集线器架构的方式，使用范式建模（贴源）的方法。这一层主要是做规范化的事情，比如应用库表非规范化，字段格式复杂（json格式）需做一些处理。这一层不是必须有的。也不会对外开放使用。范式建模保证了数据一致性、唯一性、正确性。</li><li><strong>DW-DM层</strong>是采用Kimball的总线式的数据仓库架构，针对部门（比如财务部门）或者某一主题（比如商户、用户），通过维度建模（推荐星型模型），构建一致性维度，原子粒度的数据是DW层，按照实体或者主题经过一定的汇总，建设数据集市模型。数据集市可以为OLAP提供服务。</li></ul></li><li><h2 id="为什么要分层"><a href="#为什么要分层" class="headerlink" title="==为什么要分层=="></a>==为什么要分层==</h2></li><li><ul><li><strong>空间换时间</strong>。通过建设多层次的数据模型供用户使用，避免用户直接使用操作型数据，可以更高效的访问数据。</li><li><strong>把复杂问题简单化</strong>。讲一个复杂的任务分解成多个步骤来完成，每一层只处理单一的步骤，比较简单和容易理解。而且便于维护数据的准确性，当数据出现问题之后，可以不用修复所有的数据，只需要从有问题的步骤开始修复。</li><li><strong>便于处理业务的变化</strong>。随着业务的变化，只需要调整底层的数据，对应用层对业务的调整零感知.</li></ul></li></ol><ol><li><h2 id="分层的价值"><a href="#分层的价值" class="headerlink" title="==分层的价值=="></a>==分层的价值==</h2></li><li><ul><li><p><strong>高效</strong>的数据组织形式【<strong>易维护</strong>】<br>面向主题的特性决定了数据仓库拥有业务数据库所无法拥有的高效的数据组织形式，更加完整的数据体系，清晰的数据分类和分层机制。因为所有数据在进入数据仓库之前都经过清洗和过滤，使原始数据不再杂乱无章，基于优化查询的组织形式，有效提高数据获取、统计和分析的效率。</p></li><li><p>**时间价值【高性能】</p><p>**数据仓库的构建将大大缩短获取信息的时间，数据仓库作为数据的集合，所有的信息都可以从数据仓库直接获取，数据仓库的最大优势在于一旦底层从各类数据源到数据仓库的ETL流程构建成型，那么每天就会有来自各方面的信息通过自动任务调度的形式流入数据仓库，从而使一切基于这些底层信息的数据获取的效率达到迅速提升。<br>从应用来看，使用数据仓库可以大大提高数据的查询效率，尤其对于海量数据的关联查询和复杂查询，所以数据仓库有利于实现复杂的统计需求，提高数据统计的效率。</p></li><li><p><strong>集成价值【简单化】</strong></p><p>数据仓库是所有数据的集合，包括日志信息、数据库数据、文本数据、外部数据等都集成在数据仓库中，对于应用来说，实现各种不同数据的关联并使多维分析更加方便，为从多角度多层次地数据分析和决策制定提供的可能。</p></li><li><p><strong>历史数据【历史性】</strong></p><p>记录历史是数据仓库的特性之一，数据仓库能够还原历史时间点上的产品状态、用户状态、用户行为等，以便于能更好的回溯历史，分析历史，跟踪用户的历史行为，更好地比较历史和总结历史，同时根据历史预测未来。</p></li></ul></li></ol><p><img src="/2019/02/02/data-warehouse/7BE7C0841C3B507BC72594D7CA3AA881.png" alt="img"></p><hr><p><img src="/2019/02/02/data-warehouse/image-20200501132250365.png" alt="image-20200501132250365"></p><p><img src="/2019/02/02/data-warehouse/image-20200501132328077.png" alt="image-20200501132328077"></p><p><img src="/2019/02/02/data-warehouse/image-20200501132946371.png" alt="image-20200501132946371"></p><p><img src="/2019/02/02/data-warehouse/image-20200501132958473.png" alt="image-20200501132958473"></p><p><img src="/2019/02/02/data-warehouse/image-20200501133014584.png" alt="image-20200501133014584"></p><p><img src="/2019/02/02/data-warehouse/image-20200501133031757.png" alt="image-20200501133031757"></p><h2 id="星型模型-与-雪花模型-的对比与相同点："><a href="#星型模型-与-雪花模型-的对比与相同点：" class="headerlink" title="==星型模型 与  雪花模型 的对比与相同点：=="></a>==星型模型 与  雪花模型 的对比与相同点：==</h2><p><img src="/2019/02/02/data-warehouse/image-20200501133616739.png" alt="image-20200501133616739"></p><h3 id="1-应用不同："><a href="#1-应用不同：" class="headerlink" title="1.应用不同："></a>1.应用不同：</h3><h4 id="星型模型-的设计方式主要带来的好处是能够提升查询效率，因为生成的事实表已经经过预处理，主要的数据都在事实表里面，所以只要扫描实时表就能够进行大量的查询，而不必进行大量的join，其次维表数据一般比较少，在join可直接放入内存进行join以提升效率，除此之外，星型模型的事实表可读性比较好，不用关联多个表就能获取大部分核心信息，设计维护相对比较简答。"><a href="#星型模型-的设计方式主要带来的好处是能够提升查询效率，因为生成的事实表已经经过预处理，主要的数据都在事实表里面，所以只要扫描实时表就能够进行大量的查询，而不必进行大量的join，其次维表数据一般比较少，在join可直接放入内存进行join以提升效率，除此之外，星型模型的事实表可读性比较好，不用关联多个表就能获取大部分核心信息，设计维护相对比较简答。" class="headerlink" title="==星型模型==的设计方式主要带来的好处是能够提升查询效率，因为生成的事实表已经经过预处理，主要的数据都在事实表里面，所以只要扫描实时表就能够进行大量的查询，而不必进行大量的join，其次维表数据一般比较少，在join可直接放入内存进行join以提升效率，除此之外，星型模型的事实表可读性比较好，不用关联多个表就能获取大部分核心信息，设计维护相对比较简答。"></a>==星型模型==的设计方式主要带来的好处是能够提升查询效率，因为生成的事实表已经经过预处理，主要的数据都在事实表里面，所以只要扫描实时表就能够进行大量的查询，而不必进行大量的join，其次维表数据一般比较少，在join可直接放入内存进行join以提升效率，除此之外，星型模型的事实表可读性比较好，不用关联多个表就能获取大部分核心信息，设计维护相对比较简答。</h4><h4 id="雪花模型-的设计方式是比较符合数据库范式的理念，设计方式比较正规，数据冗余少，但在查询的时候可能需要join多张表从而导致查询效率下降，此外规范化操作在后期维护比较复杂。"><a href="#雪花模型-的设计方式是比较符合数据库范式的理念，设计方式比较正规，数据冗余少，但在查询的时候可能需要join多张表从而导致查询效率下降，此外规范化操作在后期维护比较复杂。" class="headerlink" title="==雪花模型==的设计方式是比较符合数据库范式的理念，设计方式比较正规，数据冗余少，但在查询的时候可能需要join多张表从而导致查询效率下降，此外规范化操作在后期维护比较复杂。"></a>==雪花模型==的设计方式是比较符合数据库范式的理念，设计方式比较正规，数据冗余少，但在查询的时候可能需要join多张表从而导致查询效率下降，此外规范化操作在后期维护比较复杂。</h4><h3 id="2-共同点："><a href="#2-共同点：" class="headerlink" title="2.共同点："></a>2.共同点：</h3><blockquote><ul><li><h4 id="非标准化设计"><a href="#非标准化设计" class="headerlink" title="非标准化设计"></a>非标准化设计</h4></li><li><h4 id="无数据完整性（注意数据更新与增加）"><a href="#无数据完整性（注意数据更新与增加）" class="headerlink" title="无数据完整性（注意数据更新与增加）"></a>无数据完整性（注意数据更新与增加）</h4></li></ul></blockquote><h2 id="3-特点比较："><a href="#3-特点比较：" class="headerlink" title="3.特点比较："></a>3.特点比较：</h2><p><img src="/2019/02/02/data-warehouse/image-20200501133909109.png" alt="image-20200501133909109"></p><h3 id="4-两者对比："><a href="#4-两者对比：" class="headerlink" title="4.==两者对比：=="></a>4.==两者对比：==</h3><h3 id="星型模型因为数据的冗余所以很多统计查询不需要做外部的连接，因此一般情况下效率比雪花型模型要高。在冗余可以接受的前提下，实际运用中星型模型使用更多，也更有效率。-在雪花模型中，数据模型的业务层级是由一个不同维度表主键-外键的关系来代表的。而在星形模型中，所有必要的维度表在事实表中都只拥有外键。"><a href="#星型模型因为数据的冗余所以很多统计查询不需要做外部的连接，因此一般情况下效率比雪花型模型要高。在冗余可以接受的前提下，实际运用中星型模型使用更多，也更有效率。-在雪花模型中，数据模型的业务层级是由一个不同维度表主键-外键的关系来代表的。而在星形模型中，所有必要的维度表在事实表中都只拥有外键。" class="headerlink" title="星型模型因为数据的冗余所以很多统计查询不需要做外部的连接，因此一般情况下效率比雪花型模型要高。在冗余可以接受的前提下，实际运用中星型模型使用更多，也更有效率。 在雪花模型中，数据模型的业务层级是由一个不同维度表主键-外键的关系来代表的。而在星形模型中，所有必要的维度表在事实表中都只拥有外键。"></a>星型模型因为数据的冗余所以很多统计查询不需要做外部的连接，因此一般情况下效率比雪花型模型要高。在冗余可以接受的前提下，实际运用中星型模型使用更多，也更有效率。 在雪花模型中，数据模型的业务层级是由一个<strong>不同维度表主键-外键的关系</strong>来代表的。而在星形模型中，所有<strong>必要的维度表在事实表中都只拥有外键</strong>。</h3><ul><li><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3></li></ul><blockquote><h4 id="雪花模型使得维度分析更加容易"><a href="#雪花模型使得维度分析更加容易" class="headerlink" title="雪花模型使得维度分析更加容易"></a>雪花模型使得维度分析更加容易</h4><h4 id="雪花模型使得维度分析更加容易，比如“针对特定的广告主，有哪些客户或者公司在线的？”"><a href="#雪花模型使得维度分析更加容易，比如“针对特定的广告主，有哪些客户或者公司在线的？”" class="headerlink" title="雪花模型使得维度分析更加容易，比如“针对特定的广告主，有哪些客户或者公司在线的？”"></a>雪花模型使得维度分析更加容易，比如“针对特定的广告主，有哪些客户或者公司在线的？”</h4><h4 id="星型模型用来做指标分析更适合，比如“给定的一个客户他们的收入是多少？”"><a href="#星型模型用来做指标分析更适合，比如“给定的一个客户他们的收入是多少？”" class="headerlink" title="星型模型用来做指标分析更适合，比如“给定的一个客户他们的收入是多少？”"></a>星型模型用来做指标分析更适合，比如“给定的一个客户他们的收入是多少？”</h4></blockquote><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h3 id="星星模型-对比-雪花模型"><a href="#星星模型-对比-雪花模型" class="headerlink" title="星星模型 对比 雪花模型"></a><a href="https://www.cnblogs.com/jiangbei/p/8485122.html" target="_blank" rel="noopener">星星模型 对比 雪花模型</a></h3><hr><h2 id="ER-建模与-维度建模："><a href="#ER-建模与-维度建模：" class="headerlink" title="ER 建模与 维度建模："></a>ER 建模与 维度建模：</h2><h2 id="-2"><a href="#-2" class="headerlink" title=""></a><img src="/2019/02/02/data-warehouse/image-20200501135149143.png" alt="image-20200501135149143"></h2><p><img src="/2019/02/02/data-warehouse/image-20200501135221254.png" alt="image-20200501135221254"></p><hr><h3 id="数据治理-DataGovernance-，是企业数据治理部门发起并推行的，关于如何制定和实施针对整个企业内部数据的商业应用和技术管理的一系列政策和流程。"><a href="#数据治理-DataGovernance-，是企业数据治理部门发起并推行的，关于如何制定和实施针对整个企业内部数据的商业应用和技术管理的一系列政策和流程。" class="headerlink" title="==数据治理==(DataGovernance)，是企业数据治理部门发起并推行的，关于如何制定和实施针对整个企业内部数据的商业应用和技术管理的一系列政策和流程。"></a>==数据治理==(DataGovernance)，是企业数据治理部门发起并推行的，关于如何制定和实施针对整个企业内部数据的商业应用和技术管理的一系列政策和流程。</h3><h4 id="数据治理是一套持续改善管理机制，通常包括了数据架构组织、数据模型、政策及体系制定、技术工具、数据标准、数据质量、影响度分析、作业流程、监督及考核等内容。"><a href="#数据治理是一套持续改善管理机制，通常包括了数据架构组织、数据模型、政策及体系制定、技术工具、数据标准、数据质量、影响度分析、作业流程、监督及考核等内容。" class="headerlink" title="数据治理是一套持续改善管理机制，通常包括了数据架构组织、数据模型、政策及体系制定、技术工具、数据标准、数据质量、影响度分析、作业流程、监督及考核等内容。"></a>数据治理是一套持续改善管理机制，通常包括了数据架构组织、数据模型、政策及体系制定、技术工具、数据标准、数据质量、影响度分析、作业流程、监督及考核等内容。</h4><h4 id="“数据治理是目前一个比较新兴的、正在发展的学科，目前业界对它的定义还不完全一样。”"><a href="#“数据治理是目前一个比较新兴的、正在发展的学科，目前业界对它的定义还不完全一样。”" class="headerlink" title="“数据治理是目前一个比较新兴的、正在发展的学科，目前业界对它的定义还不完全一样。”"></a>“数据治理是目前一个比较新兴的、正在发展的学科，目前业界对它的定义还不完全一样。”</h4><h4 id="数据治理涉及的IT技术主题包括元数据管理、主数据管理、数据质量、数据集成、监控与报告等。"><a href="#数据治理涉及的IT技术主题包括元数据管理、主数据管理、数据质量、数据集成、监控与报告等。" class="headerlink" title="数据治理涉及的IT技术主题包括元数据管理、主数据管理、数据质量、数据集成、监控与报告等。"></a>数据治理涉及的IT技术主题包括元数据管理、主数据管理、数据质量、数据集成、监控与报告等。</h4><p><img src="/2019/02/02/data-warehouse/image-20200501140018385.png" alt="image-20200501140018385"></p><p><img src="/2019/02/02/data-warehouse/image-20200501140031865.png" alt="image-20200501140031865"></p><p><img src="/2019/02/02/data-warehouse/image-20200501135715677.png" alt="image-20200501135715677"></p><p><img src="/2019/02/02/data-warehouse/image-20200501131756697.png" alt="image-20200501131756697"></p><hr><hr><hr><h2 id="数据挖掘："><a href="#数据挖掘：" class="headerlink" title="==数据挖掘：=="></a>==数据挖掘：==</h2><h3 id="https-zhuanlan-zhihu-com-p-99363553"><a href="#https-zhuanlan-zhihu-com-p-99363553" class="headerlink" title="https://zhuanlan.zhihu.com/p/99363553"></a><a href="https://zhuanlan.zhihu.com/p/99363553" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/99363553</a></h3><h3 id="https-zhuanlan-zhihu-com-p-99167118"><a href="#https-zhuanlan-zhihu-com-p-99167118" class="headerlink" title="https://zhuanlan.zhihu.com/p/99167118"></a><a href="https://zhuanlan.zhihu.com/p/99167118" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/99167118</a></h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Go语言</title>
      <link href="/2018/09/07/go-yu-yan/"/>
      <url>/2018/09/07/go-yu-yan/</url>
      
        <content type="html"><![CDATA[<h1 id="一、GO入门"><a href="#一、GO入门" class="headerlink" title="一、GO入门"></a>一、GO入门</h1><h2 id="url-：老师博客"><a href="#url-：老师博客" class="headerlink" title="url ：老师博客"></a>url ：<a href="https://www.liwenzhou.com/posts/Go/go_menu/" target="_blank" rel="noopener">老师博客</a></h2><h2 id="1、下载-查看版本："><a href="#1、下载-查看版本：" class="headerlink" title="1、下载/查看版本："></a>1、下载/查看版本：</h2><p><img src="/2018/09/07/go-yu-yan/image-20200405150456539.png" alt="image-20200405150456539"></p><h2 id="2、配置Go-path："><a href="#2、配置Go-path：" class="headerlink" title="2、配置Go path："></a>2、配置Go path：</h2><p><img src="/2018/09/07/go-yu-yan/image-20200405150944616.png" alt="image-20200405150456539"></p><p><img src="/2018/09/07/go-yu-yan/image-20200405151546195.png" alt="image-20200405152603484"></p><p><img src="/2018/09/07/go-yu-yan/image-20200405152603484.png" alt="image-20200405152603484"></p><p><img src="/2018/09/07/go-yu-yan/image-20200405152726411.png" alt="image-20200405152726411"></p><h2 id="3、安装编译器VS-CODE"><a href="#3、安装编译器VS-CODE" class="headerlink" title="3、安装编译器VS CODE"></a>3、安装编译器VS CODE</h2><h4 id="VS-Code-官方下载地址-：https-code-visualstudio-com-Download"><a href="#VS-Code-官方下载地址-：https-code-visualstudio-com-Download" class="headerlink" title="VS Code[官方下载地址] ：https://code.visualstudio.com/Download"></a>VS Code[官方下载地址] ：<a href="https://code.visualstudio.com/Download" target="_blank" rel="noopener">https://code.visualstudio.com/Download</a></h4><p><img src="/2018/09/07/go-yu-yan/image-20200405154556776.png" alt="image-20200405154556776"></p><p><img src="/2018/09/07/go-yu-yan/image-20200405154853020.png" alt="image-20200405154853020"></p><h4 id="工具包下载："><a href="#工具包下载：" class="headerlink" title="工具包下载："></a>工具包下载：</h4><h5 id="1、先在cmd里敲一下："><a href="#1、先在cmd里敲一下：" class="headerlink" title="1、先在cmd里敲一下："></a>1、先在cmd里敲一下：</h5><pre class="line-numbers language-bash"><code class="language-bash">go <span class="token function">env</span> -w GOPROXY<span class="token operator">=</span>https://goproxy.cn,direct<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2、操作下："><a href="#2、操作下：" class="headerlink" title="2、操作下："></a>2、操作下：</h5><p><img src="/2018/09/07/go-yu-yan/image-20200405163005796.png" alt="image-20200405163005796"></p><h5 id="或者-：-https-www-cnblogs-com-xll970105-p-11906899-html"><a href="#或者-：-https-www-cnblogs-com-xll970105-p-11906899-html" class="headerlink" title="或者 ：(https://www.cnblogs.com/xll970105/p/11906899.html)"></a>或者 ：(<a href="https://www.cnblogs.com/xll970105/p/11906899.html" target="_blank" rel="noopener">https://www.cnblogs.com/xll970105/p/11906899.html</a>)</h5><h5 id="完成后："><a href="#完成后：" class="headerlink" title="完成后："></a>完成后：</h5><p><img src="/2018/09/07/go-yu-yan/image-20200405163355279.png" alt="image-20200405163355279"></p><p><img src="/2018/09/07/go-yu-yan/image-20200405183401842.png" alt="image-20200405183401842"></p><h1 id="二、编译-amp-入门："><a href="#二、编译-amp-入门：" class="headerlink" title="二、编译 &amp; 入门："></a>二、编译 &amp; 入门：</h1><h2 id="1、编译："><a href="#1、编译：" class="headerlink" title="1、编译："></a>1、编译：</h2><h4 id="go-build：在项目下执行；"><a href="#go-build：在项目下执行；" class="headerlink" title="go build：在项目下执行；"></a><code>go build</code>：在项目下执行；</h4><h4 id="go-run：执行脚本文件；"><a href="#go-run：执行脚本文件；" class="headerlink" title="go run：执行脚本文件；"></a><code>go run</code>：执行脚本文件；</h4><h4 id="go-install表示安装的意思，它先编译源代码得到可执行文件，然后将可执行文件移动到GOPATH的bin目录下。因为我们的环境变量中配置了GOPATH下的bin目录，所以我们就可以在任意地方直接执行可执行文件了。"><a href="#go-install表示安装的意思，它先编译源代码得到可执行文件，然后将可执行文件移动到GOPATH的bin目录下。因为我们的环境变量中配置了GOPATH下的bin目录，所以我们就可以在任意地方直接执行可执行文件了。" class="headerlink" title="go install表示安装的意思，它先编译源代码得到可执行文件，然后将可执行文件移动到GOPATH的bin目录下。因为我们的环境变量中配置了GOPATH下的bin目录，所以我们就可以在任意地方直接执行可执行文件了。"></a><code>go install</code>表示安装的意思，它先编译源代码得到可执行文件，然后将可执行文件移动到<code>GOPATH</code>的bin目录下。因为我们的环境变量中配置了<code>GOPATH</code>下的bin目录，所以我们就可以在任意地方直接执行可执行文件了。</h4><h3 id="1-1跨平台编译"><a href="#1-1跨平台编译" class="headerlink" title="1.1跨平台编译"></a>1.1跨平台编译</h3><p>默认我们<code>go build</code>的可执行文件都是当前操作系统可执行的文件，如果我想在windows下编译一个linux下可执行文件，那需要怎么做呢？</p><p>只需要指定目标操作系统的平台和处理器架构即可：</p><pre class="line-numbers language-bash"><code class="language-bash">SET CGO_ENABLED<span class="token operator">=</span>0  // 禁用CGOSET GOOS<span class="token operator">=</span>linux  // 目标平台是linuxSET GOARCH<span class="token operator">=</span>amd64  // 目标处理器架构是amd64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2018/09/07/go-yu-yan/image-20200406154851399.png" alt="image-20200406154851399"></p><p><em>使用了cgo的代码是不支持跨平台编译的</em></p><p>然后再执行<code>go build</code>命令，得到的就是能够在Linux平台运行的可执行文件了。</p><h4 id="Mac-下编译-Linux-和-Windows平台-64位-可执行程序："><a href="#Mac-下编译-Linux-和-Windows平台-64位-可执行程序：" class="headerlink" title="Mac 下编译 Linux 和 Windows平台 64位 可执行程序："></a>Mac 下编译 Linux 和 Windows平台 64位 可执行程序：</h4><pre class="line-numbers language-bash"><code class="language-bash">CGO_ENABLED<span class="token operator">=</span>0 GOOS<span class="token operator">=</span>linux GOARCH<span class="token operator">=</span>amd64 go buildCGO_ENABLED<span class="token operator">=</span>0 GOOS<span class="token operator">=</span>windows GOARCH<span class="token operator">=</span>amd64 go build<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="Linux-下编译-Mac-和-Windows-平台64位可执行程序："><a href="#Linux-下编译-Mac-和-Windows-平台64位可执行程序：" class="headerlink" title="Linux 下编译 Mac 和 Windows 平台64位可执行程序："></a>Linux 下编译 Mac 和 Windows 平台64位可执行程序：</h4><pre class="line-numbers language-bash"><code class="language-bash">CGO_ENABLED<span class="token operator">=</span>0 GOOS<span class="token operator">=</span>darwin GOARCH<span class="token operator">=</span>amd64 go buildCGO_ENABLED<span class="token operator">=</span>0 GOOS<span class="token operator">=</span>windows GOARCH<span class="token operator">=</span>amd64 go build<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="Windows下编译Mac平台64位可执行程序："><a href="#Windows下编译Mac平台64位可执行程序：" class="headerlink" title="Windows下编译Mac平台64位可执行程序："></a>Windows下编译Mac平台64位可执行程序：</h4><pre class="line-numbers language-bash"><code class="language-bash">SET CGO_ENABLED<span class="token operator">=</span>0SET GOOS<span class="token operator">=</span>darwinSET GOARCH<span class="token operator">=</span>amd64go build<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、变量和常量："><a href="#2、变量和常量：" class="headerlink" title="2、变量和常量："></a>2、变量和常量：</h3><h5 id="2-1声明"><a href="#2-1声明" class="headerlink" title="2.1声明"></a>2.1声明</h5><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> name <span class="token builtin">string</span><span class="token keyword">var</span> age <span class="token builtin">int</span><span class="token keyword">var</span> isOk <span class="token builtin">bool</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>同等于</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> <span class="token punctuation">(</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span>    isOk <span class="token builtin">bool</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-2短变量声明"><a href="#2-2短变量声明" class="headerlink" title="2.2短变量声明"></a>2.2短变量声明</h5><p>在函数内部，可以使用更简略的 <code>:=</code> 方式声明并初始化变量。<strong><em>（注意不可以在函数外使用）</em></strong></p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 全局变量m</span><span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token number">100</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    n <span class="token operator">:=</span> <span class="token number">10</span>    m <span class="token operator">:=</span> <span class="token number">200</span> <span class="token comment" spellcheck="true">// 此处声明局部变量m</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><h5 id="2-3-iota"><a href="#2-3-iota" class="headerlink" title="2.3   iota"></a>2.3   <a href=""><strong>iota</strong></a></h5></blockquote><p><code>iota</code>是go语言的常量计数器，只能在常量的表达式中使用。</p><p><code>iota</code>在const关键字出现时将被重置为0。const中每新增一行常量声明将使<code>iota</code>计数一次(iota可理解为const语句块中的行索引)。 使用iota能简化定义，在定义枚举时很有用。</p><p>举个例子：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>        n1 <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment" spellcheck="true">//0</span>        n2        <span class="token comment" spellcheck="true">//1</span>        n3        <span class="token comment" spellcheck="true">//2</span>        n4        <span class="token comment" spellcheck="true">//3</span>    <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-4几个常见的iota示例"><a href="#2-4几个常见的iota示例" class="headerlink" title="2.4几个常见的iota示例:"></a>2.4几个常见的<code>iota</code>示例:</h5><p>使用<code>_</code>跳过某些值</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>        n1 <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment" spellcheck="true">//0</span>        n2        <span class="token comment" spellcheck="true">//1</span>        <span class="token boolean">_</span>        n4        <span class="token comment" spellcheck="true">//3</span>    <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>iota</code>声明中间插队</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>        n1 <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment" spellcheck="true">//0</span>        n2 <span class="token operator">=</span> <span class="token number">100</span>  <span class="token comment" spellcheck="true">//100</span>        n3 <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment" spellcheck="true">//2</span>        n4        <span class="token comment" spellcheck="true">//3</span>    <span class="token punctuation">)</span>    <span class="token keyword">const</span> n5 <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment" spellcheck="true">//0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义数量级 （这里的<code>&lt;&lt;</code>表示左移操作，<code>1&lt;&lt;10</code>表示将1的二进制表示向左移10位，也就是由<code>1</code>变成了<code>10000000000</code>，也就是十进制的1024。同理<code>2&lt;&lt;2</code>表示将2的二进制表示向左移2位，也就是由<code>10</code>变成了<code>1000</code>，也就是十进制的8。）</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>        <span class="token boolean">_</span>  <span class="token operator">=</span> <span class="token boolean">iota</span>        KB <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token boolean">iota</span><span class="token punctuation">)</span>        MB <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token boolean">iota</span><span class="token punctuation">)</span>        GB <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token boolean">iota</span><span class="token punctuation">)</span>        TB <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token boolean">iota</span><span class="token punctuation">)</span>        PB <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token boolean">iota</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多个<code>iota</code>定义在一行</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>        a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">iota</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token comment" spellcheck="true">//1,2</span>        c<span class="token punctuation">,</span> d                      <span class="token comment" spellcheck="true">//2,3</span>        e<span class="token punctuation">,</span> f                      <span class="token comment" spellcheck="true">//3,4</span>    <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、数字类型："><a href="#3、数字类型：" class="headerlink" title="3、数字类型："></a>3、数字类型：</h3><h5 id="其中，uint8就是我们熟知的byte型，int16对应C语言中的short型，int64对应C语言中的long型。"><a href="#其中，uint8就是我们熟知的byte型，int16对应C语言中的short型，int64对应C语言中的long型。" class="headerlink" title="其中，uint8就是我们熟知的byte型，int16对应C语言中的short型，int64对应C语言中的long型。"></a>其中，<code>uint8</code>就是我们熟知的<code>byte</code>型，<code>int16</code>对应C语言中的<code>short</code>型，<code>int64</code>对应C语言中的<code>long</code>型。</h5><table><thead><tr><th align="center">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">uint8</td><td align="center">无符号 8位整型 (0 到 255)</td></tr><tr><td align="center">uint16</td><td align="center">无符号 16位整型 (0 到 65535)</td></tr><tr><td align="center">uint32</td><td align="center">无符号 32位整型 (0 到 4294967295)</td></tr><tr><td align="center">uint64</td><td align="center">无符号 64位整型 (0 到 18446744073709551615)</td></tr><tr><td align="center">int8</td><td align="center">有符号 8位整型 (-128 到 127)</td></tr><tr><td align="center">int16</td><td align="center">有符号 16位整型 (-32768 到 32767)</td></tr><tr><td align="center">int32</td><td align="center">有符号 32位整型 (-2147483648 到 2147483647)</td></tr><tr><td align="center">int64</td><td align="center">有符号 64位整型 (-9223372036854775808 到 9223372036854775807)</td></tr></tbody></table><h3 id="3-1数字字面量语法（Number-literals-syntax）"><a href="#3-1数字字面量语法（Number-literals-syntax）" class="headerlink" title="3.1数字字面量语法（Number literals syntax）"></a>3.1数字字面量语法（Number literals syntax）</h3><h4 id="v-0b00101101，-代表二进制的-101101，相当于十进制的-45。-v-0o377，代表八进制的-377，相当于十进制的-255。-v-0x1p-2，代表十六进制的-1-除以-2²，也就是-0-25。-而且还允许我们用-来分隔数字，比如说："><a href="#v-0b00101101，-代表二进制的-101101，相当于十进制的-45。-v-0o377，代表八进制的-377，相当于十进制的-255。-v-0x1p-2，代表十六进制的-1-除以-2²，也就是-0-25。-而且还允许我们用-来分隔数字，比如说：" class="headerlink" title="v := 0b00101101， 代表二进制的 101101，相当于十进制的 45。 v := 0o377，代表八进制的 377，相当于十进制的 255。 v := 0x1p-2，代表十六进制的 1 除以 2²，也就是 0.25。 而且还允许我们用 _ 来分隔数字，比如说："></a>v := 0b00101101， 代表二进制的 101101，相当于十进制的 45。 v := 0o377，代表八进制的 377，相当于十进制的 255。 v := 0x1p-2，代表十六进制的 1 除以 2²，也就是 0.25。 而且还允许我们用 _ 来分隔数字，比如说：</h4><h4 id="v-123-456-等于-123456。"><a href="#v-123-456-等于-123456。" class="headerlink" title="v := 123_456 等于 123456。"></a>v := 123_456 等于 123456。</h4><h3 id="3-2打印浮点数时，可以使用fmt包配合动词-f，代码如下："><a href="#3-2打印浮点数时，可以使用fmt包配合动词-f，代码如下：" class="headerlink" title="3.2打印浮点数时，可以使用fmt包配合动词%f，代码如下："></a>3.2打印浮点数时，可以使用<code>fmt</code>包配合动词<code>%f</code>，代码如下：</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>        <span class="token string">"fmt"</span>        <span class="token string">"math"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%f\n"</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>Pi<span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%.2f\n"</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>Pi<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3复数"><a href="#3-3复数" class="headerlink" title="3.3复数"></a>3.3复数</h3><p>complex64和complex128</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> c1 <span class="token builtin">complex64</span>c1 <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2i</span><span class="token keyword">var</span> c2 <span class="token builtin">complex128</span>c2 <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3i</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4布尔型"><a href="#3-4布尔型" class="headerlink" title="3.4布尔型"></a>3.4布尔型</h3><h4 id="Go语言中以bool类型进行声明布尔型数据，布尔型数据只有true（真）和false（假）两个值。"><a href="#Go语言中以bool类型进行声明布尔型数据，布尔型数据只有true（真）和false（假）两个值。" class="headerlink" title="Go语言中以bool类型进行声明布尔型数据，布尔型数据只有true（真）和false（假）两个值。"></a>Go语言中以<code>bool</code>类型进行声明布尔型数据，布尔型数据只有<code>true（真）</code>和<code>false（假）</code>两个值。</h4><ol><li>布尔类型变量的默认值为<code>false</code>。</li><li>Go 语言中不允许将整型强制转换为布尔型.（C中可以 false=0，true=1）</li><li>布尔型无法参与数值运算，也无法与其他类型进行转换。</li></ol><h3 id="3-5字符串转义符"><a href="#3-5字符串转义符" class="headerlink" title="3.5字符串转义符"></a>3.5字符串转义符</h3><p>Go 语言的字符串常见转义符包含回车、换行、单双引号、制表符等，如下表所示。</p><table><thead><tr><th align="center">转义符</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center"><code>\r</code></td><td align="center">回车符（返回行首）</td></tr><tr><td align="center"><code>\n</code></td><td align="center">换行符（直接跳到下一行的同列位置）</td></tr><tr><td align="center"><code>\t</code></td><td align="center">制表符</td></tr><tr><td align="center"><code>\'</code></td><td align="center">单引号</td></tr><tr><td align="center"><code>\"</code></td><td align="center">双引号</td></tr><tr><td align="center"><code>\\</code></td><td align="center">反斜杠</td></tr></tbody></table><p>举个例子，我们要打印一个Windows平台下的一个文件路径：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"str := \"c:\\Code\\lesson1\\go.exe\""</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-5-1字符串的常用操作"><a href="#3-5-1字符串的常用操作" class="headerlink" title="3.5.1字符串的常用操作"></a>3.5.1字符串的常用操作</h3><table><thead><tr><th align="center">方法</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">len(str)</td><td align="center">求长度</td></tr><tr><td align="center">+或fmt.Sprintf</td><td align="center">拼接字符串</td></tr><tr><td align="center">strings.Split</td><td align="center">分割</td></tr><tr><td align="center">strings.contains</td><td align="center">判断是否包含</td></tr><tr><td align="center">strings.HasPrefix,strings.HasSuffix</td><td align="center">前缀/后缀判断</td></tr><tr><td align="center">strings.Index(),strings.LastIndex()</td><td align="center">子串出现的位置</td></tr><tr><td align="center">strings.Join(a[]string, sep string)</td><td align="center">join操作</td></tr></tbody></table><h3 id="3-6byte和rune类型"><a href="#3-6byte和rune类型" class="headerlink" title="3.6byte和rune类型"></a>3.6byte和rune类型</h3><p>组成每个字符串的元素叫做“字符”，可以通过遍历或者单个获取字符串元素获得字符。 字符用单引号（’）包裹起来，如：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> a <span class="token operator">:=</span> <span class="token string">'中'</span><span class="token keyword">var</span> b <span class="token operator">:=</span> <span class="token string">'x'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Go 语言的字符有以下两种：</p><ol><li><code>uint8</code>类型，或者叫 byte 型，代表了<code>ASCII码</code>的一个字符。</li><li><code>rune</code>类型，代表一个 <code>UTF-8字符</code>。</li></ol><p>当需要处理中文、日文或者其他复合字符时，则需要用到<code>rune</code>类型。<code>rune</code>类型实际是一个<code>int32</code>。</p><p>Go 使用了特殊的 rune 类型来处理 Unicode，让基于 Unicode 的文本处理更为方便，也可以使用 byte 型进行默认字符串处理，性能和扩展性都有照顾。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 遍历字符串</span><span class="token keyword">func</span> <span class="token function">traversalString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s <span class="token operator">:=</span> <span class="token string">"hello沙河"</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//byte</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v(%c) "</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> r <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//rune</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v(%c) "</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> r<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-bash"><code class="language-bash">104<span class="token punctuation">(</span>h<span class="token punctuation">)</span> 101<span class="token punctuation">(</span>e<span class="token punctuation">)</span> 108<span class="token punctuation">(</span>l<span class="token punctuation">)</span> 108<span class="token punctuation">(</span>l<span class="token punctuation">)</span> 111<span class="token punctuation">(</span>o<span class="token punctuation">)</span> 230<span class="token punctuation">(</span>æ<span class="token punctuation">)</span> 178<span class="token punctuation">(</span>²<span class="token punctuation">)</span> 153<span class="token punctuation">(</span><span class="token punctuation">)</span> 230<span class="token punctuation">(</span>æ<span class="token punctuation">)</span> 178<span class="token punctuation">(</span>²<span class="token punctuation">)</span> 179<span class="token punctuation">(</span>³<span class="token punctuation">)</span> 104<span class="token punctuation">(</span>h<span class="token punctuation">)</span> 101<span class="token punctuation">(</span>e<span class="token punctuation">)</span> 108<span class="token punctuation">(</span>l<span class="token punctuation">)</span> 108<span class="token punctuation">(</span>l<span class="token punctuation">)</span> 111<span class="token punctuation">(</span>o<span class="token punctuation">)</span> 27801<span class="token punctuation">(</span>沙<span class="token punctuation">)</span> 27827<span class="token punctuation">(</span>河<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>因为UTF8编码下一个中文汉字由3~4个字节组成，所以我们不能简单的按照字节去遍历一个包含中文的字符串，否则就会出现上面输出中第一行的结果。</p><p>字符串底层是一个byte数组，所以可以和<code>[]byte</code>类型相互转换。字符串是不能修改的 字符串是由byte字节组成，所以字符串的长度是byte字节的长度。 rune类型用来表示utf8字符，一个rune字符由一个或多个byte组成。</p><h3 id="3-6-1修改字符串"><a href="#3-6-1修改字符串" class="headerlink" title="3.6.1修改字符串"></a>3.6.1修改字符串</h3><p>要修改字符串，需要先将其转换成<code>[]rune</code>或<code>[]byte</code>，完成后再转换为<code>string</code>。无论哪种转换，都会重新分配内存，并复制字节数组。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">changeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s1 <span class="token operator">:=</span> <span class="token string">"big"</span>    <span class="token comment" spellcheck="true">// 强制类型转换</span>    byteS1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>    byteS1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'p'</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>byteS1<span class="token punctuation">)</span><span class="token punctuation">)</span>    s2 <span class="token operator">:=</span> <span class="token string">"白萝卜"</span>    runeS2 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">rune</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>    runeS2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'红'</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>runeS2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-7类型转换"><a href="#3-7类型转换" class="headerlink" title="3.7类型转换"></a>3.7类型转换</h2><p>Go语言中只有强制类型转换，没有隐式类型转换。该语法只能在两个类型之间支持相互转换的时候使用。</p><p>强制类型转换的基本语法如下：</p><pre class="line-numbers language-bash"><code class="language-bash">T<span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，T表示要转换的类型。表达式包括变量、复杂算子和函数返回值等.</p><p>比如计算直角三角形的斜边长时使用math包的Sqrt()函数，该函数接收的是float64类型的参数，而变量a和b都是int类型的，这个时候就需要将a和b强制类型转换为float64类型。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">sqrtDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span>    <span class="token keyword">var</span> c <span class="token builtin">int</span>    <span class="token comment" spellcheck="true">// math.Sqrt()接收的参数是float64类型，需要强制转换</span>    c <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>a<span class="token operator">*</span>a <span class="token operator">+</span> b<span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
